Database


import sqlite3

con = sqlite3.connect('disrupt.db')

con.execute(''' drop table if exists patient ''')

con.execute(''' drop table if exists patient_staging ''')

con.execute(''' drop table if exists patient_receptor ''')

con.execute(''' drop table if exists patient_treatment ''')

con.execute(''' drop table if exists trial ''')

con.execute(''' drop table if exists trial_cancer_type ''')

con.execute(''' drop table if exists trial_menop_status ''')

con.execute(''' drop table if exists trial_stage ''')

con.execute(''' drop table if exists trial_receptor ''')

con.execute(''' drop table if exists trial_treatment ''')

con.execute(''' drop table if exists staging_rank ''')

con.execute(''' create table patient (pk_id integer primary key, pat_id text, mrn text, dob text, cancer_type text,  new_or_progressed text, menop_status text, date_screened text) ''')

con.execute(''' create table patient_staging (fk_id integer, stage text, stage_t text, stage_n text, stage_m text) ''')

con.execute(''' create table patient_receptor (fk_id integer, receptor_type text, receptor_value text ) ''')

con.execute(''' create table patient_treatment (fk_id integer, treatment_type text, treatment_name text, treatment_start_date text, treatment_end_date text) ''')

con.execute(''' create table trial (pk_id integer primary key, nci_number text, date_parsed text) ''')

con.execute(''' create table trial_cancer_type (fk_id integer, cancer_type text) ''')

con.execute(''' create table trial_menop_status (fk_id integer, menop_status text) ''')

con.execute(''' create table trial_stage (fk_id integer, stage text) ''')

con.execute(''' create table trial_receptor (fk_id integer, receptor_type text, receptor_value text ) ''')

con.execute(''' create table trial_treatment (fk_id integer, treatment_type text, treatment_name text ) ''')

con.execute(''' create table staging_rank (stage_name varchar(100), ranking integer) ''')
 
con.execute(''' insert into staging_rank values  ('Stage 0',1) ''')
con.execute(''' insert into staging_rank values  ('Stage I',2) ''')
con.execute(''' insert into staging_rank values  ('Stage IA',3) ''')
con.execute(''' insert into staging_rank values  ('Stage IB',4) ''')
con.execute(''' insert into staging_rank values  ('Stage II',5) ''')
con.execute(''' insert into staging_rank values  ('Stage IIA',6) ''')
con.execute(''' insert into staging_rank values  ('Stage IIB',7) ''')
con.execute(''' insert into staging_rank values  ('Stage III',8) ''')
con.execute(''' insert into staging_rank values  ('Stage IIIA',9) ''')
con.execute(''' insert into staging_rank values  ('Stage IIIB',10) ''')
con.execute(''' insert into staging_rank values  ('Stage IIIC',11) ''')
con.execute(''' insert into staging_rank values  ('Stage IV',12) ''')

con.commit()








Parser




import os
import csv
import sys
import json
import time
import sqlite3
import requests
import json
import argparse

from datetime import datetime
from collections import defaultdict

def get_trial_json(trial_id, base_url, header):
    success = True
    error_flag = '_complete'

    criteria = []
    criteria = criteria + [f'nci_id={trial_id}']
    criteria = '&'.join(criteria)
    url = base_url + criteria
    try:
        r = requests.get(url, headers=header, timeout=30)
    except Exception as e:
        print(trial_id, "straight up timeout")
        print(e)
        error_flag = "_error"
        success = False
    print(trial_id, end='\t')
    print(r, end='\t')
    if r.status_code != 200:
        print(r.status_code)
        print(r.content)
        error_flag = "_error"
        success = False
    r = r.json()

    total = r.get('total')
    data = r.get('data')


    if data is None:
        data = r
        error_flag = "_error"
        print(data)
        print(r.headers)
    else:
        try:
            pass
            data[0].pop('sites')
        except Exception as e:
            print(data, end='\t')
            print("no data or wrong data element")
            error_flag = "_error"
            success = False

    if success:
        print(error_flag)

    with open(f'./ref/trial_json/{trial_id}{error_flag}.json', 'w') as out:
        out.write(json.dumps(data, indent=4))

    time.sleep(2.5)
    return success

def load_trials(ctrp_api_key):
    CTRP_HEADERS = {'x-api-key': ctrp_api_key}

    trial_fn = './ref/trial_identifiers.txt'
    trial_fh = open(trial_fn)
    trial_ids = [line.strip() for line in trial_fh if not line.strip().startswith('#')]

    print(f"Found {len(trial_ids)} trials to pull json data for.")


    CTRP_BASE_URL = 'https://clinicaltrialsapi.cancer.gov/api/v2/trials?'

    print("Looking for existing json downloads first...")

    completed_trials = [fn.split('_')[0] for fn in os.listdir('./ref/trial_json')]
    print(f"Found {len(completed_trials)} trials where we already have json files downloaded. We will not re-download these.")

    for trial_id in trial_ids:
        if trial_id in completed_trials:
            continue

        get_trial_json(trial_id, CTRP_BASE_URL, CTRP_HEADERS)

def parse_trials():

    VALID_SITES = ["Breast",] # "Lung", "Liver"

    # get the json files that were successfully downloaded
    files_in = [fn for fn in os.listdir('./ref/trial_json') if fn.split('_')[1].split('.')[0] == 'complete']

    print(f"Found {len(files_in)} trials with valid json.")

    trials2anatomicsites = defaultdict(set)
    anatomic_sites = defaultdict(int)
    site2trials = defaultdict(set)

    print(f"Extracting anatomic sites for each trial.")

    for fn in files_in:
        trial_id = fn.split('_')[0]
        data = json.loads(open(os.path.join('ref', 'trial_json', fn)).read())[0]
        anatomic_site = data.get('anatomic_sites')
        for site in anatomic_site:
            anatomic_sites[site] += 1
            site2trials[site].add(trial_id)
            trials2anatomicsites[trial_id].add(site)

    for site, count in anatomic_sites.items():
        print(f"\tSite: {site}, Count: {count}")

    print(f"Extracting stage inclusion criteria for each trial.")

    trials2stages = defaultdict(set)
    stages = defaultdict(int)

    for fn in files_in:
        trial_id = fn.split('_')[0]
        data = json.loads(open(os.path.join('ref', 'trial_json', fn)).read())[0]
        disease = data.get('diseases')
        for d in disease:
            type = d.get('type')
            inclusion_indicator = d.get('inclusion_indicator')
            is_lead_disease = d.get('is_lead_disease')
            if inclusion_indicator != 'TRIAL':
                continue

            if 'stage' in type and d.get('name').lower().find('breast') != -1:
                stage = None
                if d.get('name').split()[0] == 'Stage':
                    stage = ' '.join(d.get('name').split()[:2])
                elif d.get('name').split()[0] == 'Recurrent':
                    stage = 'Recurrent'
                else:
                    print(f"Unexpected stage format: {d.get('name')}")

                if stage is not None:
                    trials2stages[trial_id].add(stage)
                    stages[stage] += 1

    for stage, count in stages.items():
        print(f"\tStage: {stage}, Count: {count}")

    print(f"Extracting receptor status criteria for each trial.")

    trial2pr_status = defaultdict(set)
    pr_statuses = defaultdict(int)

    trial2er_status = defaultdict(set)
    er_statuses = defaultdict(int)

    trial2her2_status = defaultdict(set)
    her2_statuses = defaultdict(int)

    for fn in files_in:
        trial_id = fn.split('_')[0]
        data = json.loads(open(os.path.join('ref', 'trial_json', fn)).read())[0]
        biomarkers = data.get('biomarkers')
        if biomarkers is None:
            continue

        for biomarker in biomarkers:
            inclusion_indicator = biomarker['inclusion_indicator']

            if biomarker['name'].find('Progesteron') != -1:
                pr_status = None
                if biomarker['name'] == 'Progesterone Receptor Positive':
                    pr_status = 'PR+'
                elif biomarker['name'] == 'Progesterone Receptor Negative':
                    pr_status = 'PR-'
                elif biomarker['name'] == 'Progesterone Receptor Status':
                    # no information here
                    pass
                else:
                    print(f"Encountered unknown progesterone status: {biomarker['name']}")

                if pr_status is not None:
                    trial2pr_status[trial_id].add(pr_status)
                    pr_statuses[pr_status] += 1

            elif biomarker['name'].find('Estrogen') != -1:
                er_status = None
                if biomarker['name'] == 'Estrogen Receptor Positive':
                    er_status = 'ER+'
                elif biomarker['name'] == 'Estrogen Receptor Negative':
                    er_status = 'ER-'
                elif biomarker['name'] == 'Estrogen Receptor Status':
                    # no information here
                    pass
                else:
                    print(f"Encountered unknown estrogen status: {biomarker['name']}")

                if er_status is not None:
                    trial2er_status[trial_id].add(er_status)
                    er_statuses[er_status] += 1

            elif biomarker['name'].find('HER') != -1:
                her2_status = None
                if biomarker['name'] == 'HER2/Neu Negative':
                    her2_status = 'HER2-'
                elif biomarker['name'] == 'HER2/Neu Positive':
                    her2_status = 'HER2+'
                elif biomarker['name'] == 'HER2/Neu Status':
                    # no information here
                    pass
                else:
                    print(f"Encountered unknown HER2 status: {biomarker['name']}")

                if her2_status is not None:
                    trial2her2_status[trial_id].add(her2_status)
                    her2_statuses[her2_status] += 1
            else:
                # this is a recpetor we currently aren't including
                pass


    for receptor_statuses in [pr_statuses, er_statuses, her2_statuses]:
        for status, count in receptor_statuses.items():
            print(f"\tReceptor Status: {status}, Count: {count}")

    print(f"Extracting prior therapy criteria for each trial.")

    # load the drug names
    drug_file = open('./ref/epic_chemotherapeutics.txt')
    drug_reader = csv.reader(drug_file, delimiter='\t')

    drugs = set([row[1] for row in drug_reader if len(row) > 1])
    drug_file.close()

    print(f"\tLoaded {len(drugs)} chemotherapeutics to look for in inclusion criteria.")

    trial2prior_drugs = defaultdict(set)
    prior_drugs_count = defaultdict(int)

    for fn in files_in:
        trial_id = fn.split('_')[0]
        data = json.loads(open(os.path.join('ref', 'trial_json', fn)).read())[0]

        eligibility = data.get('eligibility')['unstructured']
        for e in eligibility:
            #line = [e['inclusion_indicator'], e['display_order'], e['description'].replace('\n', ' ').replace('\r', '')]

            if not e['inclusion_indicator']:
                # inclusion criteria are listed as True
                # exclusion criteria are listed as False (I think)
                continue

            if len(drugs & set(e['description'].split())) > 0:
                prior_drugs = drugs & set(e['description'].split())
                for d in prior_drugs:
                    trial2prior_drugs[trial_id].add(d)
                    prior_drugs_count[d] += 1
                    if d == 'tamoxifen':
                        print(trial_id)

    for drug, count in prior_drugs_count.items():
        print(f"\tPrior drug: {drug}, Count: {count}")

    return trials2anatomicsites, trials2stages, trial2er_status, trial2pr_status, trial2her2_status, trial2prior_drugs

def insert_data(trials2anatomicsites, trials2stages, trial2er_status, trial2pr_status, trial2her2_status, trial2prior_drugs):

    # Connect to the database and insert the trial information
    con = sqlite3.connect('disrupt.db')
    cursor = con.cursor()
    date_parsed = datetime.now()
    trials2primarykeys = dict()

    print("Inserting trial data into disrupt.db...")
    for trial_id in trials2anatomicsites.keys():
        cursor.execute(f"insert into trial (nci_number, date_parsed) values ('{trial_id}', '{date_parsed}')")
        trials2primarykeys[trial_id] = cursor.lastrowid
        #print(f"trial_id: {trial_id}, lastrowid: {cursor.lastrowid}")

    print("Inserting trial cancer types into disrupt.db...")
    for trial_id, cancer_types in trials2anatomicsites.items():
        fk_id = trials2primarykeys[trial_id]
        for cancer_type in cancer_types:
            if not cancer_type in ('Breast','Liver','Prostate'):
                continue
            cursor.execute(f"insert into trial_cancer_type (fk_id, cancer_type) values ({fk_id}, '{cancer_type}')")

    print("Inserting trial staging data into drsrupt.db...")
    for trial_id, stages in trials2stages.items():
        fk_id = trials2primarykeys[trial_id]
        for stage in stages:
            cursor.execute(f"insert into trial_stage (fk_id, stage) values ({fk_id}, '{stage}')")

    print("Inserting trial receptor status data...")
    for receptor, trial2status in [('ER', trial2er_status), ('PR', trial2pr_status), ('HER2', trial2her2_status)]:
        print(f" {receptor}...")
        for trial_id, statuses in trial2status.items():
            fk_id = trials2primarykeys[trial_id]
            for status in statuses:
                cursor.execute(f"insert into trial_receptor (fk_id, receptor_type, receptor_value) values ({fk_id}, '{receptor}', '{status}')")

    print("Insert trial treatments...")
    for trial_id, prior_drugs in trial2prior_drugs.items():
        fk_id = trials2primarykeys[trial_id]
        for drug in prior_drugs:
            cursor.execute(f"insert into trial_treatment (fk_id, treatment_type, treatment_name) values ({fk_id}, 'drug', '{drug}')")

    con.commit()
    con.close()

if __name__ == '__main__':

    config = json.loads(open('./config.json').read())
    
    load_trials(config['ctrp_api_key'])

    data = parse_trials()

    insert_data(*data)











Screener



import pyodbc
import pandas as pd
import numpy as np
import re
import os
import sqlite3
from datetime import datetime
from dateutil.relativedelta import relativedelta

#Status of patient
def find_status(note_text):
    m = re.findall('((NEW|New))',str(note_text))
    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "NEW"
    else :
        return "PROGRESSED"
    
    return np.nan

#Breast cancer keywords
def find_breast_cancer(note_text):
    m = re.findall('((Breast cancer|breast cancer)|(metastatic carcinoma consistent by history and morphology with mammary ductal carcinoma)|(adenocarcinoma compatible with breast origin)|(malignant neoplasm of right female breast)|(malignant neoplasm of left female breast)|(left breast cancer)|(left breast carcinoma)|(history left breast cancer)|(recent diagnosis of left breast cancer)|(Breast CA|breast CA)|(DCIS)|(ductal carcinoma in situ|ductal carcinoma in situ (DCIS)))',str(note_text))
    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        return "Breast"
        
    return np.nan

#Stage cancer template
def find_stage_cancer(note_text):
    overallstage = ''
    #Metatstatic cancer: stage IV
    metastc = re.findall('((metastatic\s*breast\s*cancer)|(MBC)|(Metastatic\s*TNBC)|(Advanced\s*Breast\s*Cancer)|(Stage\s*4[^.;\/]*\s+breast\s*cancer)|(breast\s*cancer[^.;\/]*\s+Stage\s*4))',str(note_text),re.IGNORECASE)
    #Stage of the patient 
    clinic_stage = re.findall('(Stage[^.;\/]*\s+(?:I(?:[AB]?C)? |1(?:[AB]?C)? |II(?:[AB])? |III(?:[AB]?C)? |IV ))', str(note_text))
    #AJCC staging
    m = re.search('.*AJCC ([0-9]{1,2}[a-z][a-z]) Edition.+?(Clinical|Pathologic):*.*(Stage (?:I(?:[AB])?|II(?:[AB])?|III(?:[AB]?C)?|IV) \(.*?\)*.)', str(note_text))
    
    if m is not None:
        ajcc = m.group(1)
        path_or_clin = m.group(2)
        staging = m.group(3)
        openparen = staging.index('(')
        closeparen = staging.rfind(')')
        overallstage = staging[0:(openparen-1)];
        staging_str = staging[(openparen+1):closeparen]
    if metastc:
        overallstage = 'Stage IV'
        return overallstage
    if len(overallstage)>0:
        #print(s)
        return overallstage
    elif len(overallstage)<=0 and clinic_stage:
        overallstage = clinic_stage[-1]
        return overallstage
        
    return None

#TNM staging
def find_match_all(note_text):
    m = re.findall('([a-zA-Z0-9]*([Tt][Xx0-4](is|IS)*)(p|c)*([Nn][Xx0-3][a-dA-D]{0,1})*(p|c)*[Mm][0-1xX]*[a-zA-Z0-9]*)',str(note_text))
    s=''
    if len(m)>0 :
        for i in m:
            s = s+i[0]+' '
    if len(s)>0:
        #print(s)
        return s
    return None

#Receptor status
def find_match_recep_stat(note_text):
    #print(note_text['MRN'])
    recep_stat = []
    m = re.findall('[/ \(]((HER2|ER|PR)[ \-+](\w*))',str(note_text))
    #m = re.findall('([/ \(](HER2|ER|PR)[ \-+]([PpNn]\w*)*)',str(note_text))
    if m is not None:
        her2 =None
        er = None
        pr=None
        for match in m:
                #print(match)
                if match[1] == 'HER2' and not 'Neu' in match[0]:
                        if 'neg' in match[2].lower():
                        #if 'neg' in match[0].lower():
                                her2 = 'HER2-'
                        elif 'pos' in match[2].lower():
                        #elif 'pos' in match[0].lower():
                                her2 = 'HER2+'
                        elif '+' in match[0].lower():
                                her2 = 'HER2+'
                        elif '-' in match[0].lower() and match[2] =='':
                        #elif '-' in match[0].lower():
                                her2 = 'HER2-'
                if match[1] == 'ER':
                        if 'neg' in match[2].lower():
                        #if 'neg' in match[0].lower():
                                er = 'ER-'
                        elif 'pos' in match[2].lower():
                        #elif 'pos' in match[0].lower():
                                er = 'ER+'
                        elif '+' in match[0].lower():
                                er = 'ER+'
                        elif '-' in match[0].lower() and match[2] == '':
                        #elif '-' in match[0].lower():
                                er = 'ER-'

                if match[1] == 'PR':
                        if 'neg' in match[2].lower():
                        #if 'neg' in match[0].lower():
                                pr = 'PR-'
                        elif 'pos' in match[2].lower():
                        #elif 'pos' in match[0].lower():
                                pr = 'PR+'
                        elif '+' in match[0].lower():
                                pr = 'PR+'
                        elif '-' in match[0].lower() and match[2] =='':
                        #elif '-' in match[0].lower():
                                pr = 'PR-'

                            
                            
    
    ######    Sign search
    status_patterns = re.findall(r'(?:pos|neg|\+|-)/(?:pos|neg|\+|-)/(?:pos|neg|\+|-)', note_text)
    
    # Initialize status variables
    er_sign_status = pr_sign_status = her2_sign_status = last_pattern = ''
    if status_patterns:
        last_pattern = status_patterns[-1].split("/")
        
        if last_pattern[0] == 'pos' or last_pattern[0] == '+':
            er_sign_status = 'ER+'
        elif last_pattern[0] == 'neg' or last_pattern[0] == '-':
            er_sign_status = 'ER-'

        if last_pattern[1] == 'pos' or last_pattern[1] == '+':
            pr_sign_status = 'PR+'
        elif last_pattern[1] == 'neg' or last_pattern[1] == '-':
            pr_sign_status = 'PR-'

        if last_pattern[2] == 'pos' or last_pattern[2] == '+':
            her2_sign_status = 'HER2+'
        elif last_pattern[2] == 'neg' or last_pattern[2] == '-':
            her2_sign_status = 'HER2-'


      
    
    
    
    ######  Word search
    er_status = pr_status = her2_status = ''
    er_text = pr_text = her2_text = ''
    # Use re.findall to find ER status
    er_statuses = re.findall(r'(?<!\w)(?:ER:|ER |ER :|ER/PR|ER/PR/HER[ -]2|ESTROGEN RECEPTOR)[^.;]*\s*(?:\(\s*POSITIVE\s*\)|\(\s*NEGATIVE\s*\)|\s*POSITIVE\s*|\s*NEGATIVE\s*)', note_text, re.IGNORECASE)
    
    # Use re.findall to find PR status
    pr_statuses = re.findall(r'(?<!\w)(?:PR:|PR |PR :|ER/PR|PR/HER[ -]2|PROGESTERONE RECEPTOR)[^;]*\s*(?:\(\s*POSITIVE\s*\)|\(\s*NEGATIVE\s*\)|\s*POSITIVE\s*|\s*NEGATIVE\s*)', note_text, re.IGNORECASE)
    
    # Use re.findall to find HER2 status
    her2_statuses = re.findall(r'HER[ -]?2:?-?NEU?[^;]*\s*(?:\(\s*POSITIVE\s*\)|\(\s*NEGATIVE\s*\)|\s*POSITIVE\s*|\s*NEGATIVE\s*)', note_text, re.IGNORECASE)

    if er_statuses:
        er_status = er_statuses[-1]  # Take the last ER status found

    if pr_statuses:
        pr_status = pr_statuses[-1]  # Take the last PR status found

    if her2_statuses:
        her2_status = her2_statuses[-1]  # Take the last HER2 status found

    if 'negative' in er_status.lower():
        er_text = "ER-"
    elif 'positive' in er_status.lower():
        er_text = "ER+"

    if 'negative' in pr_status.lower():
        pr_text = "PR-"
    elif 'positive' in pr_status.lower():
        pr_text = "PR+"

    if 'negative' in her2_status.lower():
        her2_text = "HER2-"
    elif 'positive' in her2_status.lower():
        her2_text = "HER2+"
        
    neg_statuses = re.findall(r'(?:TNBC |TNBC;|TNBC.|TNBC,)', note_text, re.IGNORECASE)
    if neg_statuses:
        er_text = "ER-"
        pr_text = "PR-"
        her2_text = "HER2-"
        
        
    #####Final solution
    
    if er_sign_status and pr_sign_status and her2_sign_status:
        er = er_sign_status
        pr = pr_sign_status
        her2 = her2_sign_status
        
        recep_stat.append(er)
        recep_stat.append(pr)
        recep_stat.append(her2)
        
        return recep_stat
    
    textcount = 0
    if er_text or pr_text or her2_text:
        if er_text:
            er = er_text
            textcount+=1
        if pr_text:
            pr = pr_text
            textcount+=1
        if her2_text:
            her2 = her2_text
            textcount+=1
        if textcount == 3:
            recep_stat.append(er)
            recep_stat.append(pr)
            recep_stat.append(her2)
            return recep_stat
    
    
    recep_stat.append(er)
    recep_stat.append(pr)

    recep_stat.append(her2)
#     print(recep_stat)
    return recep_stat


#M from TNM staging
def find_match_m(note_text):
    m = re.findall('(((p|c)*([M][0-1][X]*[\(i+\)]*\s))|((Metastatic|metatastic)\s*Breast\s*Cancer)|(MBC)|((Metastatic|metatastic) TNBC)|([Mm]etastatic))',str(note_text))
    s=''
    if len(m)>0 :
        for i in m:
            s = s+i[0]+' '
    if len(s)>0:
        return s
        
    return None


#N from TNM staging
def find_match_n(note_text):
    m = re.findall('((p|c)*([N][0-3][a-dA-D]{0,1}))',str(note_text))

    s=''
    if len(m)>0 :
        for i in m:
            s = s+i[0]+' '
    if len(s)>0:
        #print(s)
        return s
    return None


#T from TNM staging
def find_match_t(note_text):
    m = re.findall('(([y]*(p|c)*[T][0-4]([abc]|is(?![a-zA-Z])|IS(?![a-zA-Z]))*))',str(note_text))
    s=''
    if len(m)>0:
        for i in m:
            s = s+i[0]+' '
    else:
        m = re.findall('([y]*(p|c)*[T](is(?![a-zA-Z])|IS(?![a-zA-Z])))',str(note_text))
        #print(m)
        for i in m:
            s = s+i[0]+' '
        
        
    if len(s)>0:
        #print(s)
        return s
        
    return None


#Final staging: from Stage template to TNM staging
def extract_staging(txt):
    
    M = txt[0]
    T = txt[1]
    N = txt[2]
    total = txt[3]
    ajcc = txt[4]
    overallstage = ''
    if(ajcc is not None):
        overallstage = ajcc
    elif(ajcc is None):
        if (M is not None):
            if 'm1' in M.lower():
            #if 'm1' in M.lower() or 'metastatic' in M.lower():
                    overallstage = 'Stage IV'
                    return overallstage
        if total is not None :
            if 'm1' in total.lower():
                overallstage = 'Stage IV'
                return overallstage
        if T is not None and N is not None:
            if 'tis' in T.lower() and 'n0' in N.lower():
                    overallstage = 'Stage 0'
                    return overallstage
            elif 't1' in T.lower() and 'n0' in N.lower():
                    overallstage = 'Stage 1A'
                    return overallstage
            elif 't0' in T.lower() and 'n1mi' in N.lower():
                    overallstage = 'Stage 1B'
                    return overallstage
            elif 't1' in T.lower() and 'n1mi' in N.lower():
                    overallstage = 'Stage 1B'
                    return overallstage
            elif 't0' in T.lower() and 'n1' in N.lower():
                    overallstage = 'Stage IIA'
                    return overallstage
            elif 't1' in T.lower() and 'n1' in N.lower():
                    overallstage = 'Stage IIA'
                    return overallstage
            elif 't2' in T.lower() and 'n0' in N.lower():
                    overallstage = 'Stage IIA'
                    return overallstage
            elif 't2' in T.lower() and 'n1' in N.lower():
                    overallstage = 'Stage IIB'
                    return overallstage
            elif 't3' in T.lower() and 'n0' in N.lower():
                    overallstage = 'Stage IIB'
                    return overallstage
            elif 't0' in T.lower() and 'n2' in N.lower():
                    overallstage = 'Stage IIIA'
                    return overallstage
            elif 't1' in T.lower() and 'n2' in N.lower():
                    overallstage = 'Stage IIIA'
                    return overallstage
            elif 't2' in T.lower() and 'n2' in N.lower():
                overallstage = 'Stage IIIA'
                return overallstage
            elif 't3' in T.lower() and 'n1' in N.lower():
                overallstage = 'Stage IIIA'
                return overallstage
            elif 't3' in T.lower() and 'n2' in N.lower():
                overallstage = 'Stage IIIA'
                return overallstage
            elif 't4' in T.lower() and 'n0' in N.lower():
                overallstage = 'Stage IIIB'
                return overallstage
            elif 't4' in T.lower() and 'n1' in N.lower():
                overallstage = 'Stage IIIB'
                return overallstage
            elif 't4' in T.lower() and 'n2' in N.lower():
                overallstage = 'Stage IIIB'
                return overallstage
        if N is not None:
            if 'n3' in N.lower():
                overallstage = 'Stage IIIC'
                return overallstage
        if total is not None and N is not None:
            if 'tis' in total.lower() and 'n0' in total.lower():
                overallstage = 'Stage 0'
                return overallstage
            elif 't1' in total.lower() and 'n0' in total.lower():
                    overallstage = 'Stage 1A'
                    return overallstage
            elif 't0' in total.lower() and 'n1mi' in total.lower():
                    overallstage = 'Stage 1B'
                    return overallstage
            elif 't1' in total.lower() and 'n1mi' in total.lower():
                    overallstage = 'Stage 1B'
                    return overallstage
            elif 't0' in total.lower() and 'n1' in total.lower():
                    overallstage = 'Stage IIA'
                    return overallstage
            elif 't1' in total.lower() and 'n1' in total.lower():
                    overallstage = 'Stage IIA'
                    return overallstage
            elif 't2' in total.lower() and 'n0' in total.lower():
                    overallstage = 'Stage IIA'
                    return overallstage
            elif 't2' in total.lower() and 'n1' in total.lower():
                    overallstage = 'Stage IIB'
                    return overallstage
            elif 't3' in total.lower() and 'n0' in total.lower():
                    overallstage = 'Stage IIB'
                    return overallstage
            elif 't0' in total.lower() and 'n2' in total.lower():
                    overallstage = 'Stage IIIA'
            elif 't1' in total.lower() and 'n2' in total.lower():
                    overallstage = 'Stage IIIA'
                    return overallstage
            elif 't2' in total.lower() and 'n2' in total.lower():
                overallstage = 'Stage IIIA'
                return overallstage
            elif 't3' in total.lower() and 'n1' in total.lower():
                overallstage = 'Stage IIIA'
            elif 't3' in total.lower() and 'n2' in total.lower():
                overallstage = 'Stage IIIA'
                return overallstage
            elif 't4' in total.lower() and 'n0' in total.lower():
                overallstage = 'Stage IIIB'
            elif 't4' in total.lower() and 'n1' in total.lower():
                overallstage = 'Stage IIIB'
                return overallstage
            elif 't4' in total.lower() and 'n2' in total.lower():
                overallstage = 'Stage IIIB'
                return overallstage
            elif 'n3' in N.lower():
                overallstage = 'Stage IIIC'
                return overallstage
        elif T is not None:
            overallstage = 'NOT ENOUGH INFORMATION'        
        else:
            overallstage = 'NOT ENOUGH INFORMATION'

        
    return overallstage
        
    

if __name__ == '__main__':
    
    #Connect to the database
    sqlite = sqlite3.connect('disrupt.db')

    #Path to the files
    path2note=r"pathtonote"
    path2cohort= r"pathtocohort"
    
    #Reading files
    df_coh_list = pd.read_csv(path2cohort,encoding='utf8')
    df_path = pd.read_csv(path2note,encoding='latin-1')
    

    df_path.sort_values(by='SERVICE_DATE',inplace=True, ascending= False)
    df_path = df_path.fillna('')
    print('num of records: ',len(df_path))
    print('unique patients: ',df_path.MRN.nunique())
    df_path.reset_index(inplace = True)
    df_path.drop('index', axis=1,inplace = True)
    df_path.head(3)
    
    #Applying functions
    #df_path['T'] = df_path['TEXT'].apply(find_match_t)
    df_path.loc[df_path['TYPE'].str.contains('Progress|Pathology', case=False), 'T'] = df_path['TEXT'].apply(find_match_t)
    #df_path['N'] = df_path['TEXT'].apply(find_match_n)
    df_path.loc[df_path['TYPE'].str.contains('Progress|Pathology', case=False), 'N'] = df_path['TEXT'].apply(find_match_n)
    #df_path['M'] = df_path['TEXT'].apply(find_match_m)
    df_path.loc[df_path['TYPE'].str.contains('Progress|Pathology', case=False), 'M'] = df_path['TEXT'].apply(find_match_m)
    #df_path['all'] = df_path['TEXT'].apply(find_match_all)
    df_path.loc[df_path['TYPE'].str.contains('Progress|Pathology', case=False), 'all'] = df_path['TEXT'].apply(find_match_all)
    df_path['recep_stat'] = df_path['TEXT'].apply(find_match_recep_stat)
    df_path['ER'] = df_path['recep_stat'].apply(lambda x: x[0])
    df_path['PR'] = df_path['recep_stat'].apply(lambda x: x[1])
    df_path['Her2'] = df_path['recep_stat'].apply(lambda x: x[2])
    #df_path['AJCC'] = df_path['TEXT'].apply(find_stage_cancer)
    df_path.loc[df_path['TYPE'].str.contains('Progress|Pathology', case=False), 'AJCC'] = df_path['TEXT'].apply(find_stage_cancer)
    df_path['Cancer Type'] = df_path['TEXT'].apply(find_breast_cancer)
    df_path['MATCH TYPE'] = df_path['MATCH_TYPE'].apply(find_status)
    df_path.reset_index(inplace = True)
    df_path.head(2)

    
    df_path = df_path[['MRN', 'MATCH TYPE', 'Cancer Type', 'SERVICE_DATE', 'TYPE', 'TEXT', 'T', 'N','M','all','ER','PR','Her2','AJCC']]

    
    dft = df_path.dropna(subset = ['T'], axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['T'].unique().to_frame()
    dft.reset_index(inplace=True)
    dft['T'] = dft['T'].apply(lambda x: x[0].split(' ')[0])
    dft.head(2)

    dfm = df_path.dropna(subset = ['M'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['M'].unique().to_frame()
    dfm.reset_index(inplace=True)
    print(len(dfm))
    dfm['M'] = dfm['M'].apply(lambda x: x[0].split(' ')[0])
    dfm.head(2)

    dfn = df_path.dropna(subset=['N'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['N'].unique().to_frame()
    dfn.reset_index(inplace=True)
    dfn['N'] = dfn['N'].apply(lambda x: x[0].split(' ')[0])
    print(len(dfn))
    dfn.head(2)

    df_all = df_path.dropna(subset=['all'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['all'].unique().to_frame()
    df_all.reset_index(inplace=True)
    df_all['all'] = df_all['all'].apply(lambda x: x[0].split(' ')[0])
    print(len(df_all))
    df_all.head(2)
    
    df_st = df_path.dropna(subset=['AJCC'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['AJCC'].unique().to_frame()
    df_st.reset_index(inplace=True)
    print(len(df_st))
    df_st['AJCC'] = df_st['AJCC'].apply(lambda x: x[0])
    df_st.head(5)


    df_PR = df_path.dropna(subset=['PR'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['PR'].unique().to_frame()
    df_PR.reset_index(inplace=True)
    print(len(df_PR))
    df_PR['PR'] = df_PR['PR'].apply(lambda x: x[0])
    df_PR.head(2)


    df_ER = df_path.dropna(subset=['ER'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['ER'].unique().to_frame()
    df_ER.reset_index(inplace=True)
    print(len(df_ER))
    df_ER['ER'] = df_ER['ER'].apply(lambda x: x[0])
    df_ER.head(2)


    df_her = df_path.dropna(subset=['Her2'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Her2'].unique().to_frame()
    df_her.reset_index(inplace=True)
    print(len(df_her))
    df_her['Her2'] = df_her['Her2'].apply(lambda x: x[0])
    df_her.head(2)


    df_ct = df_path.dropna(subset=['Cancer Type'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Cancer Type'].unique().to_frame()
    df_ct.reset_index(inplace=True)
    print(len(df_ct))
    df_ct['Cancer Type'] = df_ct['Cancer Type'].apply(lambda x: x[0])
    df_ct.head(2)


    df_c = df_path.dropna(subset=['MATCH TYPE'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['MATCH TYPE'].unique().to_frame()
    df_c.reset_index(inplace=True)
    print(len(df_c))
    df_c['MATCH TYPE'] = df_c['MATCH TYPE'].apply(lambda x: x[0])
    df_c.head(2)

    # Calculate menopausal status
    df_coh_list['BIRTHDATE'] = pd.to_datetime(df_coh_list['BIRTHDATE'], errors='coerce')
    now = pd.Timestamp.now()
    df_coh_list['AGE'] = df_coh_list['BIRTHDATE'].apply(lambda x: relativedelta(now, x).years if pd.notnull(x) else pd.NaT)
    df_coh_list['MENOPAUSAL_STATUS'] = df_coh_list['AGE'].apply(lambda x: 'Postmenopause' if x >= 50 else 'Premenopause' if pd.notnull(x) else '')
    df_menop = df_coh_list[['MRN', 'MENOPAUSAL_STATUS']]

    #Merging all data
    df_f = pd.merge(dfn,dfm,on='MRN',how='outer')
    df_f = pd.merge(df_f,dft,on='MRN',how='outer')
    df_f = pd.merge(df_f,df_all,on='MRN',how='outer')
    df_f = pd.merge(df_f,df_ER,on='MRN',how='outer')
    df_f = pd.merge(df_f,df_PR,on='MRN',how='outer')
    df_f = pd.merge(df_f,df_her,on='MRN',how='outer')
    df_f = pd.merge(df_f,df_st,on='MRN',how='outer')
    df_f = pd.merge(df_f,df_c,on='MRN',how='outer')
    df_f = pd.merge(df_f,df_ct,on='MRN',how='outer')
    df_f = pd.merge(df_f, df_coh_list[['MRN', 'BIRTHDATE']], on='MRN', how='outer')
    df_f = pd.merge(df_f,df_menop,on='MRN',how='outer')
    df_f = df_f.where(pd.notnull(df_f), None)
    print(len(df_f))
    df_f.head(3)
    df_f ['Overall stage'] = df_f[['M','T','N','all','AJCC']].apply(extract_staging,axis=1)
    set(df_f['all'].values)
    
    #Deleting duplicates
    mask_duplicates = df_f.duplicated(subset='MRN', keep='first')
    df_f = df_f[~mask_duplicates]
    
    #Change columns order and sorting
    df_f = df_f.reindex(columns=['MRN','MATCH TYPE','Cancer Type','BIRTHDATE','MENOPAUSAL_STATUS','T','N','M','all','ER','PR','Her2','AJCC','Overall stage'])
    df_f = df_f.sort_values(by='MRN')
    
    df_f.to_excel('result_v1.xlsx')
    
    pks = dict()
    sqlite_cursor = sqlite.cursor()

    print("processing results into sqlite")
    index = 1
    if df_f is not None:
        for _, row in df_f.iterrows():
            sqlite_cursor.execute("insert into patient (pat_id, mrn, dob, cancer_type, new_or_progressed, menop_status, date_screened) values ('%(pat_id)s','%(mrn)s','%(dob)s','%(disease)s','%(match_type)s','%(menop_status)s','%(now)s')" % {'pat_id': index, 'mrn': row['MRN'], 'dob': row['BIRTHDATE'], 'disease': row['Cancer Type'],'match_type': row['MATCH TYPE'], 'menop_status': row['MENOPAUSAL_STATUS'], 'now': datetime.now()})
            
            print(f"pat_id: {index} , mrn: {row['MRN']} , dob: {row['BIRTHDATE']}, disease: {row['Cancer Type']} ,match_type: {row['MATCH TYPE']}, now: {datetime.now()} ")
            sqlite_cursor.execute ("insert into patient_staging (fk_id, stage, stage_t, stage_n, stage_m) values (%(pat_id)s,'%(stage)s','%(T)s','%(N)s','%(M)s')" % {'pat_id': index, 'stage': row['Overall stage'], 'T': row['T'], 'N': row['N'], 'M': row['M']})
            print(f"pat_id: {index}, 'stage': {row['Overall stage']} , 'T': {row['T']} , 'N': {row['N']} , 'M': {row['M']} ")
            sqlite_cursor.execute ("insert into patient_receptor values ('%(pat_id)s','%(key)s','%(value)s')" % {'pat_id': index, 'key': 'ER', 'value': row['ER']})
            print(f"pat_id: {index}, key: ER, value: {row['ER']}")
            sqlite_cursor.execute ("insert into patient_receptor values ('%(pat_id)s','%(key)s','%(value)s')" % {'pat_id': index, 'key': 'PR', 'value': row['PR']}) 
            print(f"pat_id: {index}, key: PR, value: {row['PR']}")
            sqlite_cursor.execute ("insert into patient_receptor values ('%(pat_id)s','%(key)s','%(value)s')" % {'pat_id': index, 'key': 'HER2', 'value': row['Her2']})
            print(f"pat_id: {index}, key: HER2, value: {row['Her2']}")
            index+=1    

    sqlite.commit()
    sqlite.close()
    today = datetime.today()
    print(today.strftime("%Y/%m/%d %H:%M:%S"))
    df_path.to_excel('dfpath_v1.xlsx')
    df_f.to_excel('result_v1.xlsx')








Matcher



import os
from datetime import datetime
import sqlite3
import csv
import pandas as pd
import numpy as np
import time

#Extracting trials from database
def trialres():
    sql = """SELECT trial.nci_number, trial_cancer_type.cancer_type, trial_menop_status.menop_status, trial_stage.stage, trial_receptor.receptor_type, trial_receptor.receptor_value
    FROM trial
    left JOIN trial_cancer_type ON trial.pk_id = trial_cancer_type.fk_id 
    left JOIN trial_menop_status ON trial.pk_id = trial_menop_status.fk_id 
    left JOIN trial_stage ON trial.pk_id = trial_stage.fk_id 
    left JOIN trial_receptor ON trial.pk_id = trial_receptor.fk_id"""



    cursor.execute(sql)
    results = cursor.fetchall()
    today = datetime.today()
    print(today.strftime("%Y/%m/%d %H:%M:%S"))


    df = pd.DataFrame({'NCI_NUMBER': pd.Series(dtype='str'),
                       'CANCER_TYPE': pd.Series(dtype='str'),
                       'Trial Menopausal Status': pd.Series(dtype='str'),
                       'STAGE': pd.Series(dtype='str'),
                       'RECEPTOR_VALUE': pd.Series(dtype='str')})
    i = 0
    for nci_number,cancer_type,menop_status,stage,receptor_type,receptor_value in results:
        df.loc[i, ['NCI_NUMBER', 'CANCER_TYPE', 'Trial Menopausal Status', 'STAGE', 'RECEPTOR_VALUE']] = nci_number,cancer_type,menop_status,stage,receptor_value
        i+=1

    df1 = df.replace(np.nan,'',regex=True)
    df1.head(10)


    # group by col1 and aggregate the other columns
    grouped = df1.groupby('NCI_NUMBER').agg({'CANCER_TYPE': lambda x: ','.join(set(x)),
                                      'Trial Menopausal Status': lambda x: ','.join(set(x)),
                                      'STAGE': lambda x: ','.join(set(map(str, set(x)))),
                                      'RECEPTOR_VALUE': lambda x: ','.join(set(map(str, set(x))))})

    # reset the index to make col1 a regular column
    df2 = grouped.reset_index()

    # rename the columns
    df2.columns = ['NCI_NUMBER', 'CANCER_TYPE', 'Trial Menopausal Status', 'STAGE', 'RECEPTOR_VALUE']

    
    # Print the final DataFrame
    df2.to_excel('trialsresult_v1.xlsx')
    
    return df2

#Extracting patients from database
def patres():
    sql = """SELECT patient.mrn, patient.dob, patient.cancer_type, patient.new_or_progressed, patient.menop_status, patient.date_screened, patient_staging.stage, patient_receptor.receptor_type, patient_receptor.receptor_value
    FROM patient
    left JOIN patient_staging ON patient.pk_id = patient_staging.fk_id 
    left JOIN patient_receptor ON patient_staging.fk_id = patient_receptor.fk_id"""


    cursor.execute(sql)
    results = cursor.fetchall()
    today = datetime.today()
    print(today.strftime("%Y/%m/%d %H:%M:%S"))


    p_df = pd.DataFrame({'MRN': pd.Series(dtype='str'),
                       'CANCER_TYPE': pd.Series(dtype='str'),
                       'Patient\'s Menopausal Status': pd.Series(dtype='str'),
                       'STAGE': pd.Series(dtype='str'),
                       'RECEPTOR_VALUE': pd.Series(dtype='str')})
    i = 0
    for mrn,dob,cancer_type,new_or_progressed,menop_status,date_screened,stage,receptor_type,receptor_value in results:
        p_df.loc[i, ['MRN', 'CANCER_TYPE', 'Patient\'s Menopausal Status', 'STAGE', 'RECEPTOR_VALUE']] = mrn,cancer_type,menop_status,stage,receptor_value
        i+=1

    p_df1 = p_df.replace(np.nan,'',regex=True)
    p_df1.head(10)


    # group by col1 and aggregate the other columns
    grouped = p_df1.groupby('MRN').agg({'CANCER_TYPE': lambda x: ','.join(set(x)),
                                      'Patient\'s Menopausal Status': lambda x: ','.join(set(map(str, set(x)))),
                                      'STAGE': lambda x: ','.join(set(map(str, set(x)))),
                                      'RECEPTOR_VALUE': lambda x: ','.join(set(map(str, set(x))))})

    # reset the index to make col1 a regular column
    p_df2 = grouped.reset_index()

    # rename the columns
    p_df2.columns = ['MRN', 'CANCER_TYPE', 'Patient\'s Menopausal Status', 'STAGE', 'RECEPTOR_VALUE']

    p_df2.to_excel('patientsresult_v1.xlsx')
    
    return p_df2
    

#Matching patients with trials    
def match(df2, p_df2):
    final_data = []

    for index_p, row_p in p_df2.iterrows():
        p_mrn = row_p['MRN']
        p_cancer_type = row_p['CANCER_TYPE']
        p_menop_status = row_p['Patient\'s Menopausal Status']
        p_stage = row_p['STAGE']
        p_stage = p_stage.replace("1", "I")
        p_receptor_value = row_p['RECEPTOR_VALUE']
        print(f" Patient  MRN: {p_mrn} CANCER_TYPE: {p_cancer_type} MENOPAUSAL_STATUS: {p_menop_status} STAGE: {p_stage} RECEPTOR_VALUE: {p_receptor_value}")
        # Extract individual receptor values from p_df2
        p_receptors = p_receptor_value.split(',')
        p_erpos = 'ER+' if 'ER+' in p_receptors else ''
        p_erneg = 'ER-' if 'ER-' in p_receptors else ''
        p_prpos = 'PR+' if 'PR+' in p_receptors else ''
        p_prneg = 'PR-' if 'PR-' in p_receptors else ''
        p_her2pos = 'HER2+' if 'HER2+' in p_receptors else ''
        p_her2neg = 'HER2-' if 'HER2-' in p_receptors else ''
        recept_all = False
        if((p_erpos != '' or p_erneg != '') and (p_prpos != '' or p_prneg != '') and (p_her2pos != '' or p_her2neg != '')):
            recept_all = True
        print(f" Patient  ER+: {p_erpos} ER-: {p_erneg} PR+: {p_prpos} PR-: {p_prneg} Her2+: {p_her2pos} Her2-: {p_her2neg}")
        id_match = 0
        index_d = None
        for index_d, row_d in df2.iterrows():
            nci_number = row_d['NCI_NUMBER']
            df_cancer_type = row_d['CANCER_TYPE']
            df_menop_status = row_d['Trial Menopausal Status']
            df_stage = row_d['STAGE']
            df_receptor_value = row_d['RECEPTOR_VALUE']
            print(f" Trial  NCI_NUMBER: {nci_number} CANCER_TYPE: {df_cancer_type} MENOPAUSAL_STATUS: {df_menop_status} STAGE: {df_stage} RECEPTOR_VALUE: {df_receptor_value}")
            # Extract individual receptor values from df2
            df_receptors = df_receptor_value.split(',')
            df_erpos = 'ER+' if 'ER+' in df_receptors else ''
            df_erneg = 'ER-' if 'ER-' in df_receptors else ''
            df_prpos = 'PR+' if 'PR+' in df_receptors else ''
            df_prneg = 'PR-' if 'PR-' in df_receptors else ''
            df_her2pos = 'HER2+' if 'HER2+' in df_receptors else ''
            df_her2neg = 'HER2-' if 'HER2-' in df_receptors else ''
            print(f" Trial  ER+: {df_erpos} ER-: {df_erneg} PR+: {df_prpos} PR-: {df_prneg} Her2+: {df_her2pos} Her2-: {df_her2neg}")
            # Check if the cancer type and stage match
            if (p_cancer_type == df_cancer_type or df_cancer_type == '' or p_cancer_type == ''):
                print(f"Patient: {p_menop_status.strip()} Trial: {df_menop_status}")
                df_menop_values = [value.strip() for value in df_menop_status.split(',')]
                if p_menop_status.strip() in df_menop_values or df_menop_status == '' or p_menop_status == '':
                    # Check if the stage matches
                    df_stages = df_stage.split(',')
                    print(f'Patient stage: {p_stage.strip()} Trial stages: {df_stages}')
                    if (df_stage == '' or (any(p_stage.strip().upper() == stage.strip().upper() or
                        p_stage.strip().upper() + suffix == stage.strip().upper()
                        for stage in df_stages
                        for suffix in ['', 'A', 'B', 'C'])) or 
                        (any(p_stage.strip().upper() == stage.strip().upper() or
                        p_stage.strip().upper() == stage.strip().upper() + suffix
                        for stage in df_stages
                        for suffix in ['', 'A', 'B', 'C']))):
                        print(f"Cancer and Stage matched for {p_mrn} and {nci_number}")
                        # Check if the receptor values match
                        if (recept_all and ((df_erpos == '' and df_erneg == '') or p_erpos.strip() == df_erpos.strip() or p_erneg.strip() == df_erneg.strip()) and
                            ((df_prpos == '' and df_prneg == '') or p_prpos.strip() == df_prpos.strip() or p_prneg.strip() == df_prneg.strip()) and
                            ((df_her2pos == '' and df_her2neg == '') or p_her2pos.strip() == df_her2pos.strip() or p_her2neg.strip() == df_her2neg.strip())):
                            # Create the matched row and append it to the final_data list
                            matched_row = [p_mrn, p_cancer_type, p_menop_status, p_stage, p_receptor_value, nci_number, df_cancer_type, df_menop_status, df_stage, df_receptor_value]
                            final_data.append(matched_row)
                            id_match+=1
                            print(f"Matches {id_match}")
        if (index_d == df2.index.max()) and (id_match == 0):
            matched_row = [p_mrn, p_cancer_type, p_menop_status, p_stage, p_receptor_value, '', '', '', '', '']
            final_data.append(matched_row)
    # Create the final dataframe
    final = pd.DataFrame(final_data, columns=['MRN', 'Patient\'s Cancer Type', 'Patient\'s Menopausal Status', 'Patient\'s Stage', 'Patient\'s Receptor Status', 'NCI_NUMBER', 'Trial\'s title', 'Trial\'s Menopausal Status', 'Trial\'s Stage', 'Trial\'s Receptor Status'])

    #Reading and merging files
    path2cohort= r"pathtocohort"
    df_coh_list = pd.read_csv(path2cohort,encoding='utf8')
    df_path = pd.read_csv(path2note,encoding='latin-1')
    final['MRN'] = final['MRN'].astype('str')
    df_coh_list['MRN'] = df_coh_list['MRN'].astype('str')
    final2 = pd.merge(final, df_coh_list, on='MRN', how='outer')
    final2.rename(columns={'UP_COMING_APPT_DATE': 'Patient\'s Appointment'}, inplace=True)
    final2 = final2.drop_duplicates(subset=['MRN','Patient\'s Appointment','NCI_NUMBER'])
    
    #Change columns order and sorting
    final2 = final2.reindex(columns=['MRN', 'Patient\'s Appointment', 'Patient\'s Cancer Type', 'Patient\'s Menopausal Status', 'Patient\'s Stage', 'Patient\'s Receptor Status', 'NCI_NUMBER', 'Trial\'s title', 'Trial\'s Menopausal Status', 'Trial\'s Stage', 'Trial\'s Receptor Status'])
    final2['MRN'] = final2['MRN'].astype(str)
    final2 = final2.sort_values(by='MRN')

    
    #new code
    final2['Patient\'s Appointment'] = final2.groupby(['MRN', 'NCI_NUMBER'])['Patient\'s Appointment'].transform(lambda x: ','.join(sorted(set(x), reverse=True)))
    
    # Drop duplicates, keeping only the first occurrence for each 'ID' and 'NCI_NUMBER'
    final2.drop_duplicates(subset=['MRN', 'NCI_NUMBER'], inplace=True)


    
    # Write the final dataframe to a CSV file
    final2.to_csv('matches.csv', index=False)




if __name__ == '__main__':
    
    #Database connection
    sqlite = sqlite3.connect('disrupt.db')
    sqlite_cursor = sqlite.cursor()
    cursor = sqlite.cursor()
    
    #Creating Dataframes
    p_df2 = pd.DataFrame()
    df2 = pd.DataFrame()
    
    #Initiating Dataframes
    df2 = trialres()
    p_df2 = patres()
    
    match(df2,p_df2)
    print(p_df2)
    print(df2)









Case identification



import pandas as pd
import numpy as np
import re
import os


def find_noprogress_cancer(note_text):

    m = re.findall('((No evidence of)|(without evidence of (local)?(\s+)?(recurrence)?)|(resolution of previously)|(No (\S+)?(\s+)?(\S+)?(\s+)?nodal metastases)|(No (\S+)?(\s+)?(\S+)?(\s+)?suspicious)|(Stable)|(Interval resolution)|(Interval mild decrease)|(Slightly increased in FDG avidity)|(Slightly increased in size)|(No evidence of malignancy)|(Benign Findings)|(ABSENCE OF ENHANCEMENT)|(No (\S+)?(\s+)?(\S+)?(\s+)?evidence)|(No significant interval change)|(similar to (\S+)?(\s+)?(\S+)?(\s+)?prior exam)|(no significant change in the size)|(No (other)?(\s+)?(abnormal)?(\s+)?tracer)|(Mildly FDG)|(mild FDG)|(Unchanged (mildly)?(\s+)?(tracer)?)|(Decrease in size)|(Decreased in size)|(No (\S+)?(\s+)?(\S+)?(\s+)?metast\w*)|(favorable response to treatment)|(without abnormal FDG uptake)|(SLIGHT INTERVAL INCREASE IN SIZE)|(No FDG-avid distant metastases)|(No significant change in FDG)|(Mildly tracer)|(nonviable tumor))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "No Progress cancer"
        
    return np.nan

def find_progress_cancer(note_text):

    m = re.findall('((progression)|(relapse)|(no_response)|(metast)|(increased size of previous suspected)|(interval increase in size)|(recurrent)|(increased)|(increase)|(worsened)|(FDG uptake))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "Progress cancer"
        
    return np.nan

def find_final_noprogress_cancer(note_text):

    m = re.findall('((No[^.;]*\s+nodal[^.;]*\s+metast\w*(?![.;]))|(No[^.;]*\s+evidence(?![.;]))|(No[^.;]*\s+metast\w*(?![.;]))|(No[^.;]*\s+FDG-avid[^.;]*\s+distant[^.;]*\s+metast\w*(?![.;]))|(Stable[^.;]*\s+metast\w*(?![.;]))|(SLIGHT\w*[^.;]*\s+INTERVAL[^.;]*\s+INCREASE[^.;]*\s+IN[^.;]*\s+SIZE(?![.;])))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "No Progress cancer"
        
    return np.nan

def find_final_progress_cancer(note_text):

    m = re.findall('((Interval[^.;]*\s+development[^.;]*\s+of[^.;]*\s+cancer(?![.;]))|(Interval[^.;]*\s+development[^.;]*\s+of[^.;]*\s+HCC(?![.;])))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "Progress cancer"
        
    return np.nan

def prioritize_non_empty(series):
    return next((val for val in series if val != ''), '')

def aggregate_values(series):
    unique_values = series.unique()
    if len(unique_values) == 1:
        return unique_values[0]
    else:
        return ', '.join(unique_values.astype(str))


if __name__ == '__main__':
    
    #Path to the files
    path2cohort= r"pathtocohort"
    path2image= r"pathtoimaging"
    
    #Reading files
    df_image = pd.read_csv(path2image,encoding='utf8')
    df_coh = pd.read_csv(path2cohort,encoding='utf8')

    df_image.rename(columns = {'SERVICEDATE':'SERVICE_DATE', 'NARRATIVE':'TEXT'}, inplace = True)
    df_image = df_image.fillna('')
    df_image.sort_values(by='SERVICE_DATE',inplace=True, ascending= False)

    df_image['TEXT+DATE'] = df_image['SERVICE_DATE']+'  '+df_image['TEXT'] + '  '+df_image['IMPRESSION']
    print('num of records: ',len(df_image))
    print('unique patients: ',df_image.MRN.nunique(),'\n')
    df_image['TYPE'] = 'imaging'
    df_image.reset_index(inplace = True)
    df_image.drop('index', axis=1,inplace = True)

    
    #Applying functions
    #No progress
    df_image['NoProgress'] = df_image['IMPRESSION'].apply(find_noprogress_cancer)
    df_np = df_image.dropna(subset=['NoProgress'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['NoProgress'].unique().to_frame()
    df_np.reset_index(inplace=True)
    print(len(df_np))
    df_np['NoProgress'] = df_np['NoProgress'].apply(lambda x: x[0])
    #df_np.head(10)
    df_np.to_excel('result_withoutprogressMSD2229impr.xlsx')
    
    #Progress
    df_image['Progress'] = df_image['IMPRESSION'].apply(find_progress_cancer)
    df_p = df_image.dropna(subset=['Progress'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Progress'].unique().to_frame()
    df_p.reset_index(inplace=True)
    print(len(df_p))
    df_p['Progress'] = df_p['Progress'].apply(lambda x: x[0])
    #df_p.head(2)
    df_p.to_excel('result_withprogressMSD2229imagnotesimpr.xlsx')
    
    #Final no progress
    df_image['NoProgress Final'] = df_image['IMPRESSION'].apply(find_final_noprogress_cancer)
    df_npf = df_image.dropna(subset=['NoProgress Final'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['NoProgress Final'].unique().to_frame()
    df_npf.reset_index(inplace=True)
    print(len(df_npf))
    df_npf['NoProgress Final'] = df_npf['NoProgress Final'].apply(lambda x: x[0])
    #df_npf.head(10)
    df_npf.to_excel('result_withoutprogressimpr.xlsx')

    #Final progress
    df_image['Progress Final'] = df_image['IMPRESSION'].apply(find_final_progress_cancer)
    df_pf = df_image.dropna(subset=['Progress Final'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Progress Final'].unique().to_frame()
    df_pf.reset_index(inplace=True)
    print(len(df_pf))
    df_pf['Progress Final'] = df_pf['Progress Final'].apply(lambda x: x[0])
    #df_pf.head(2)
    df_pf.to_excel('result_withprogressimagnotesimpr.xlsx')
    df_image.sort_values('MRN', inplace=True)
    df_image.to_excel('result_withprogressfinal.xlsx')
    
    df_res1 = df_image[['MRN', 'Progress', 'NoProgress', 'Progress Final', 'NoProgress Final','SERVICE_DATE']]
    df_res1 = df_res1.rename(columns={'SERVICE_DATE': 'Imaging dates'})
    df_res1.to_excel('result_withprogressfinal2.xlsx')
    df_res1.replace({None: '', np.nan: ''}, inplace=True)
    
    # Create a new DataFrame df_final
    df_f = pd.DataFrame()

    df_res = df_res1.groupby('MRN').agg({
    'Progress': prioritize_non_empty,
    'NoProgress': prioritize_non_empty,
    'Progress Final': prioritize_non_empty,
    'NoProgress Final': prioritize_non_empty,
    'Imaging dates': prioritize_non_empty
    }).reset_index()

    df_res.to_excel('result_withprogressfinal3.xlsx')
    if len(df_res) != 0:
        # Copy 'id' column from df_res to df_final
        df_f['MRN'] = df_res['MRN']
    
        # Apply conditions 
        if len(df_f) != 0:
            df_f['Progress'] = df_res.apply(lambda row: 'Progress cancer' if (row['Progress Final'] == 'Progress cancer') or (row['Progress'] == 'Progress cancer' and ((row['NoProgress'] == 'No Progress cancer' and row['NoProgress Final'] == '') or (row['NoProgress'] == '' and row['NoProgress Final'] == 'No Progress cancer') or (row['NoProgress'] == '' and row['NoProgress Final'] == '')) ) else '', axis=1)
            df_f['NoProgress'] = df_res.apply(lambda row: 'No Progress cancer' if (row['NoProgress'] == 'No Progress cancer' and row['Progress Final'] == '') or (row['NoProgress'] == 'No Progress cancer' and row['NoProgress Final'] == 'No Progress cancer') else '', axis=1)
            #df_f.update(df_res[['MRN', 'Imaging dates']].set_index('MRN'), overwrite=False)
            df_f = pd.merge(df_f, df_res[['MRN', 'Imaging dates']], on='MRN', how='left')
            # Display the resulting DataFrame
            print(df_f)
        df_f.to_excel('result_withprogressfinal4.xlsx')
    
    #Cohort file
    df_coh_no_duplicates = df_coh.drop_duplicates(subset=['MRN', 'UP_COMING_APPT_DATE', 'MATCH_TYPE','PROVIDERNAME'])
    if len(df_coh_no_duplicates) != 0:
        df_coh_no_duplicates['MRN'] = df_coh_no_duplicates['MRN'].astype(str)
        df_coh['MRN'] = df_coh['MRN'].astype(str)
    if len(df_res) != 0:
        df_res['MRN'] = df_res['MRN'].astype(str)
    if len(df_f) != 0:
        df_f['MRN'] = df_f['MRN'].astype(str)
    if len(df_f) == 0:
        merged_df = pd.merge(df_coh, df_res, on='MRN', how='left')
        merged_df.to_excel('result_withdf_f0.xlsx')
    else:
        merged_df = pd.merge(df_coh, df_f, on='MRN', how='left')
        merged_df.to_excel('result_withdf_f!0.xlsx')
    print(merged_df)
    merged_df = merged_df.rename(columns={'UP_COMING_APPT_DATE': 'Appointment date','PROVIDERNAME': 'Provider name'})
    merged_df['Appointment date'] = merged_df.groupby('MRN')['Appointment date'].transform(aggregate_values)
    merged_df['Provider name'] = merged_df.groupby('MRN')['Provider name'].transform(aggregate_values)
    merged_df.loc[merged_df['MATCH_TYPE'].str.contains('NEW', case=False, na=False), 'New patients'] = 'New patient'
    merged_df.drop(['MATCH_TYPE'], axis=1, inplace=True)
    merged_df['Imaging dates'] = merged_df['Imaging dates'].apply(lambda x: ','.join(pd.to_datetime(str(x).split(','), errors='coerce', format='%Y/%m/%d').strftime('%m/%d/%Y').dropna()))
    merged_df['Appointment date'] = merged_df['Appointment date'].apply(lambda x: ','.join(pd.to_datetime(str(x).split(','), errors='coerce', format='%Y/%m/%d').strftime('%m/%d/%Y').dropna()))
    merged_df = merged_df[['MRN', 'Progress', 'NoProgress', 'New patients', 'Imaging dates', 'Appointment date', 'Provider name']]
    df_unique = merged_df.drop_duplicates(subset='MRN', keep='first')
    df_sorted = df_unique.sort_values(by='MRN')
    #print(merged_df)
    
    df_sorted.to_excel('result_withprogressfinal5.xlsx')


    




