Database




import sqlite3

con = sqlite3.connect('disrupt.db')

con.execute(''' drop table if exists patient ''')

con.execute(''' drop table if exists patient_bclc ''')

con.execute(''' drop table if exists patient_ajcc ''')

con.execute(''' drop table if exists patient_treatment ''')

con.execute(''' drop table if exists trial ''')

con.execute(''' drop table if exists trial_cancer_type ''')

con.execute(''' drop table if exists trial_inform ''')

con.execute(''' drop table if exists trial_treatment ''')

con.execute(''' create table patient (pk_id integer primary key, pat_id text, mrn text, dob text, cancer_type text, date_screened text) ''')

con.execute(''' create table patient_bclc (fk_id integer, stage_bclc text, child_pugh text, ecog text) ''')

con.execute(''' create table patient_ajcc (fk_id integer, stage_ajcc text, child_pugh text, ecog text) ''')

con.execute(''' create table patient_treatment (fk_id integer, treatment_type text, treatment_name text, treatment_start_date text, treatment_end_date text) ''')

con.execute(''' create table trial (pk_id integer primary key, nci_number text, date_parsed text) ''')

con.execute(''' create table trial_cancer_type (fk_id integer, cancer_type text) ''')

con.execute(''' create table trial_inform (fk_id integer, stage text, child_pugh text, ecog text) ''')

con.execute(''' create table trial_treatment (fk_id integer, treatment_type text, treatment_name text ) ''')

con.commit()







Screener




import pyodbc
import pandas as pd
import numpy as np
import re
import os
import math
import sqlite3
from datetime import datetime


def find_cholangioca_cancer(note_text):

    m = re.findall('((cholangio(\s+)?carcinoma)|(cholangio(\s+)?CA))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "Cholangiocarcinoma"
        
    return np.nan

def find_metastca_cancer(note_text):

    m = re.findall('(((?:Advanced|metastatic)[^.;:]*\s+cholangio(\s+)?carcinoma)|((?:Advanced|metastatic)[^.;:]*\s+cholangio(\s+)?CA)|((?:Advanced|metastatic)[^.;:]*\s+disease)|((?:Advanced|advanced)[^.;:]*\s+HCC)|((?:Metastatic|metastatic)[^.;:]*\s+BTC)|(metastatic[^.;:]*\s+hepatocellular(\s+)?carcinoma))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "Metastatic carcinoma"
        
    return np.nan

def find_HCC_cancer(note_text):

    m = re.findall('(((?![a-zA-Z])HCC(?![a-zA-Z]))|(hepatocellular[^.;:](\s+)?carcinoma))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "HCC"
        
    return np.nan

def find_liver_transplant(note_text):

    m = re.findall('((liver[^.;:-?]*\s+transplant\w*))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return s
        
    return np.nan

def find_portal_invasion(note_text):
    
    m = re.findall('(((?:vein|tumor)[^.;:-?]*\s+thromb\w*)|(invasion*\s+into*\s+portal*\s+vein))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return s
        
    return np.nan

def find_child_pugh(note_text):
    # Regex pattern
    pattern = r'(?:Child[-\s]*Pugh| CP)\s*(?:Class|Score)?\s*:\s*(?: CP|Child[-\s]*Pugh)?\s*([A-C]\d*)'
    matches = list(re.finditer(pattern, note_text,flags = re.IGNORECASE))
    #print(matches)

    # Extract values
    result = np.nan
    if matches:
        last_match = matches[-1]
        result = last_match.group(1) if last_match else np.nan
    #print(f" Result: {result}")
    
    return result

def calc_child_pugh(row):

    cp = 0
    if str(row['Albumin']) != 'nan':
        if float(row['Albumin']) > 3.5:
            cp += 1
        if float(row['Albumin']) >= 2.8 and float(row['Albumin']) <= 3.5:
            cp += 2
        if float(row['Albumin']) < 2.8:  
            cp += 3
    if is_valid_string(str(row['INR'])):
        if float(row['INR']) < 1.7:
            cp += 1
        if float(row['INR']) >= 1.7 and float(row['INR']) <= 2.3:
            cp += 2
        if float(row['INR']) > 2.3:
            cp += 3
    if str(row['Total Bilirubin']) != 'nan':
        if float(row['Total Bilirubin']) < 2.0:
            cp += 1
        if float(row['Total Bilirubin']) >= 2.0 and float(row['Total Bilirubin']) <= 3.0:
            cp += 2
        if float(row['Total Bilirubin']) > 3.0:
           cp += 3
            
    if str(row['Ascites(f/calc)']) == 'nan':
        row['Ascites(f/calc)'] = '/No ascites'

    if str(row['Encephalopathy(f/calc)']) == 'nan':
        row['Encephalopathy(f/calc)'] = '/No Encephalopathy'
        
    if str(row['Ascites(f/calc)']) != 'nan':
        if 'No ascites' in row['Ascites(f/calc)']:
            cp += 1
        if 'Mild ascites' in row['Ascites(f/calc)']:
            cp += 2
        if 'Large ascites' in row['Ascites(f/calc)']:
            cp += 3

    if str(row['Encephalopathy(f/calc)']) != 'nan':
        if 'No Encephalopathy' in str(row['Encephalopathy(f/calc)']):
            cp += 1
        if '1' in str(row['Encephalopathy(f/calc)']) or '2' in str(row['Encephalopathy(f/calc)']):
            cp += 2
        if '3' in str(row['Encephalopathy(f/calc)']) or '4' in str(row['Encephalopathy(f/calc)']):
            cp += 3
    if cp >= 5 and cp <= 6:
        row['Child-Pugh calculated'] = f'A('+ str(cp) +')'
    if cp >= 7 and cp <= 9:
        row['Child-Pugh calculated'] = f'B('+ str(cp) +')'
    if cp >= 10 and cp <= 15:
        row['Child-Pugh calculated'] = f'C('+ str(cp) +')'
    
    return row

def find_ascites(note_text):
    
    g1 = re.findall('(((?:No|None)[^.;]*\s+ascites)|(Ascites\s+?:\s+None))',str(note_text),flags = re.IGNORECASE)
    g2 = re.findall('(((?:Moderate|Mild|Trace|Small|Slight)[^.;]*\s+ascites))',str(note_text),flags = re.IGNORECASE)
    g3 = re.findall('(((?:Large|large)[^.;]*\s+ascites))',str(note_text),flags = re.IGNORECASE)
    
    grade1=''
    grade2=''
    grade3=''
    
    if len(g1)>0 :
        for item in g1:
            grade1 = grade1+item[0]+','
    if len(g2)>0 :
        for item in g2:
            grade2 = grade2+item[0]+','
    if len(g3)>0 :
        for item in g3:
            grade3 = grade3+item[0]+','
         
    if len(grade1)>0:
        if len(grade3)>0:
            return "Large ascites/"
        if len(grade2)>0:
            return "Mild ascites/"
        return "No ascites/"
        
    if len(grade2)>0:
        if len(grade3)>0:
            return "Large ascites/"
        return "Mild ascites/"
        
    if len(grade3)>0:
        return "Large ascites/"
        
    return np.nan

def find_encephalopathy(note_text):
    matches = re.findall(r'(\d+-\d+\s*encephalopathy|encephalopathy\s*?:\s*(stage)?\s*([\d.-]+)|encephalopathy\s*(\d+)-(\d+))', note_text, re.IGNORECASE)
    latest_grade = -1
    #print(matches)
    # Reverse the matches list and iterate from the end
    for match in reversed(matches):
        grade = None
        if latest_grade >= 0:
            latest_grade = math.trunc(latest_grade)
            break
        #print(match)
        if match[1].replace(".", "").isnumeric() or match[1].replace(";", "").isnumeric():
            latest_grade = math.trunc(float(match[1].replace(".", "").replace(";", "")))
            break
        if match[0]:  # Check if the first part of the pattern matched
            #print(match[0])
            grade_match = re.search(r'(\d+)-(\d+)\s*encephalopathy', match[0],re.IGNORECASE)
            grade_match2 = re.search(r'encephalopathy\s*?:\s*(\d+)-(\d+)', match[0],re.IGNORECASE)
            #print(grade_match)
            #print(grade_match2)
            if grade_match:
                #print(grade_match)
                end = float(grade_match.group(2))
                if end > latest_grade:
                    latest_grade = math.trunc(end)
                    #print(f"Latest grade cycle {latest_grade} ")
            if grade_match2:
                #print(grade_match2)
                end = float(grade_match2.group(2))
                if end > latest_grade:
                    latest_grade = math.trunc(end)
                    #print(f"Latest grade2 cycle {latest_grade} ")
    
    if latest_grade >= 0:
        if latest_grade == 1:
            #print("Return 1")
            return "1"
        if latest_grade == 2:
            #print("Return 2")
            return "2"
        if latest_grade == 3:
            #print("Return 3")
            return "3"
        if latest_grade == 4:
            #print("Return 4")
            return "4"
    return np.nan

def find_ecog(note_text):

    m = re.findall(r'((?:\b(ecog[ ,:/\\-]*(?:\S+\s+){2}\S+)|\b(performance\s+status[ ,:/\\-]*(?:\S+\s+){2}\S+)))',str(note_text),flags = re.IGNORECASE)
    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return s
        
    return np.nan

def extract_number(text):
    if isinstance(text, str):  # Check if text is a string
        # Regular expression pattern to match numbers
        pattern = r'\d+'
        # Find all matches of numbers in the text
        numbers = re.findall(pattern, text)
        # If numbers are found, return the first number (assuming only one number per string)
        if numbers:
            if int(numbers[0]) > 4: 
                return None
            return int(numbers[0])
    return None  

def find_stage_cancer(note_text):
    overallstage = ''
    m = None
    #metastc = re.findall('((?<!No\s*[,.;])((?:Advanced|metastatic)[^.;:]*\s+cholangio(\s+)?carcinoma)|((?:Advanced|metastatic)[^.;:]*\s+cholangio(\s+)?CA)|((?:Advanced|metastatic)[^.;:]*\s+disease)|((?:Advanced|advanced)[^.;:]*\s+HCC)|((?:Metastatic|metastatic)[^.;:]*\s+BTC)|(metastatic[^.;:]*\s+hepatocellular(\s+)?carcinoma))',str(note_text),flags = re.IGNORECASE)
    metastc = re.findall('(((?:Advanced|metastatic)[^.;:]*\s+cholangio(\s+)?carcinoma)|((?:Advanced|metastatic)[^.;:]*\s+cholangio(\s+)?CA)|((?:Advanced|metastatic)[^.;:]*\s+disease)|((?:Advanced|advanced)[^.;:]*\s+HCC)|((?:Metastatic|metastatic)[^.;:]*\s+BTC)|(metastatic[^.;:]*\s+hepatocellular(\s+)?carcinoma))',str(note_text),flags = re.IGNORECASE)
    clinic_stage = re.findall('((?:Stage|stage)[^.;\/]*\s+(?:Stage|stage)?\s*(?:I(?:[AB])? |1(?:[AB])? |II(?:[AB])? |III(?:[AB]?)? |IV(?:[AB]?)? |0 ))', str(note_text))

    if m is not None:
        ajcc = m.group(1)
        path_or_clin = m.group(2)
        staging = m.group(3)
        openparen = staging.index('(')
        closeparen = staging.rfind(')')
        overallstage = staging[0:(openparen-1)];
        staging_str = staging[(openparen+1):closeparen]
    if metastc:
        overallstage = 'Stage IV'
        return overallstage 
    if len(overallstage)>0:
        #print(s)
        return overallstage 
    elif len(overallstage)<=0 and clinic_stage:
        overallstage = clinic_stage[-1]
        return overallstage 
        
    return None

def find_bclc_stage_cancer(note_text):

    bclc_stage = re.findall('(BCLC[^.;\/]*\s+([ABCD0]))', str(note_text))
    if bclc_stage:
        bclc_stages = [bc[1] for bc in bclc_stage]
        
        bclc = ', '.join(bclc_stages)
        return bclc.split(', ')[-1]
        
    return None

def find_stage_size(note_text):
    pattern = r'\b(\d+(?:\.\d+)?(?:x\d+(?:\.\d+)?)*)\s*cm\b'

    matches = re.findall(pattern, note_text)

    sizes_info = []

    for size_str in matches:
        sizes = [float(part) for part in re.split(r'x', size_str)]
        largest_size = max(sizes)
        sizes_info.append({"size": size_str, "largest_number": largest_size})

    # print(f"Original text: {note_text}")
    # print(f"Extracted sizes: {matches}")
    
    final_sizes = ""
    total_sizes = len(matches)
    if total_sizes > 0:
        all_sizes = [float(part) for size_str in matches for part in re.split(r'x', size_str)]
        largest_of_all_sizes = max(all_sizes)
        print(f"Number of found sizes: {total_sizes}")
        print(f"Largest size from all sizes: {largest_of_all_sizes}")
        final_sizes = "" + f"{total_sizes}," + f"{largest_of_all_sizes}"
    else:
        print("No sizes found in the text.")
    
    return final_sizes


def parse_and_max(size_str):
    sizes = [float(part) for part in re.split(r'x', size_str)]
    return max(sizes)


def calc_bclc_stage_cancer(row):

    if str(row['BCLC Stage']) != 'nan': #and (str(row['HCC']) != 'nan' or (str(row['HCC']) == 'nan' and str(row['CholangioCA']) == 'nan')):
        # print('Stage')
        #print(row['MRN'])
        if str(row['BCLC Stage']) != 'nan':
            row['BCLC Stage found'] = 'Stage ' + str(row['BCLC Stage']).split(',')[-1]
    
    elif (str(row['MetastCA']).strip().lower() != 'nan' or 'STAGE IV' in str(row['Overall stage']).upper()) and (str(row['HCC']) != 'nan' or (str(row['HCC']) == 'nan' and str(row['CholangioCA']).strip().lower() == 'nan')):
        row['BCLC Stage calc'] = 'Stage C'
        

    elif str(row['Portal Invasion']) != 'nan' and (str(row['HCC']) != 'nan' or (str(row['HCC']) == 'nan' and str(row['CholangioCA']) == 'nan')):
        row['BCLC Stage calc'] = 'Stage C'
        #print(row['MRN'])

    elif (str(row['Stage Impr']) == 'nan' or str(row['Stage Narr']) == 'nan') and (str(row['HCC']) != 'nan' or (str(row['HCC']) == 'nan' and str(row['CholangioCA']) == 'nan')) and str(row['BCLC Stage']) == 'nan' and str(row['MetastCA']) != 'nan':
         if 'A' in row['Child-Pugh found'] or 'A' in row['Child-Pugh calculated'] or 'B' in row['Child-Pugh found'] or 'B' in row['Child-Pugh calculated']:
             row['BCLC Stage found'] = 'Stage C'
         elif 'C' in row['Child-Pugh found'] or 'C' in row['Child-Pugh calculated']:
             row['BCLC Stage found'] = 'Stage D'
             
    elif (str(row['Stage Impr']) == 'nan' and str(row['Stage Narr']) == 'nan') and (str(row['HCC']) != 'nan' or (str(row['HCC']) == 'nan' and str(row['CholangioCA']) == 'nan')) and str(row['BCLC Stage']) == 'nan':
        # print('NOT ENOUGH INFORMATION')
        # print(row['MRN'])
        row['BCLC Stage calc'] = 'NOT ENOUGH INFORMATION'
    
    elif str(row['Stage Impr']) and str(row['Stage Impr']).strip().lower() != 'nan' and str(row['Stage Impr']).strip().lower() != 'none' and (str(row['HCC']) != 'nan' or (str(row['HCC']) == 'nan' and str(row['CholangioCA']) == 'nan')):
        note_text = str(row['Stage Impr'])
        split_text = note_text.split(',')
        # print('Impression')
        print(str(row['Stage Impr']).strip().lower())
        print(row['MRN'])
        # print(split_text)
        # print(note_text)
        bclc_stage = ''
        num = ''
        size = ''
        stagec = ''
        if pd.notna(note_text) and note_text is not None:
            if len(split_text) >= 1:
                num = split_text[0]
            print(num)
            if len(split_text) >= 2:
                size = split_text[1]
            print(size)
            if num != '' and size !='':
                if str(row['Portal Invasion']) != 'nan':
                    bclc_stage = "Stage C"
                elif int(num) <=1 and float(size) <= 2.0:
                    bclc_stage = "Stage 0"
                    #print(row['MRN'])
                elif int(num) <=3 and float(size) < 3.0:
                    bclc_stage = "Stage A"
                elif int(num) >=3 and float(size) >= 3.0:
                    bclc_stage = "Stage B"
            row['BCLC Stage calc'] = bclc_stage

    elif str(row['Stage Narr']) and (str(row['HCC']) != 'nan' or (str(row['HCC']) == 'nan' and str(row['CholangioCA']) == 'nan')):
        note_text = str(row['Stage Narr'])
        split_text = note_text.split(',')
        # print(row['MRN'])
        # print(split_text)
        # print(note_text)
        bclc_stage = ''
        num = ''
        size = ''
        #stagec = ''
        if pd.notna(note_text) and note_text is not None:
            if len(split_text) >= 1:
                num = split_text[0]
            print(num)
            if len(split_text) >= 2:
                size = split_text[1]
            print(size)
            if num != '' and size !='':
                if str(row['Portal Invasion']) != 'nan':
                    bclc_stage = "Stage C"
                elif int(num) <=1 and float(size) <= 2.0:
                    bclc_stage = "Stage 0"
                elif int(num) <=3 and float(size) < 3.0:
                    bclc_stage = "Stage A"
                elif int(num) >=3 and float(size) >= 3.0:
                    bclc_stage = "Stage B"
            row['BCLC Stage calc'] = bclc_stage   


        
    return row    

def find_match_all(note_text):
    m = re.findall('([a-zA-Z0-9]*([Tt][Xx0-4](is|IS)*)(p|c)*([Nn][Xx0-3][a-dA-D]{0,1})*(p|c)*[Mm][0-1xX]*[a-zA-Z0-9]*)',str(note_text))
    s=''
    if len(m)>0 :
        for i in m:
            s = s+i[0]+' '
    if len(s)>0:
        #print(s)
        return s
    return None

def find_match_m(note_text):
    m = re.findall('(((p|c)*([M][0-1][X]*[\(i+\)]*\s))|((Metastatic|metatastic)\s*Breast\s*Cancer)|(MBC)|((Metastatic|metatastic) TNBC)|([Mm]etastatic))',str(note_text))
    s=''
    if len(m)>0 :
        for i in m:
            s = s+i[0]+' '
    if len(s)>0:
        return s
        
    return None



def find_match_n(note_text):
    m = re.findall('((p|c)*([N][0-3][a-dA-D]{0,1}))',str(note_text))

    s=''
    if len(m)>0 :
        for i in m:
            s = s+i[0]+' '
    if len(s)>0:
        #print(s)
        return s
    return None

def find_match_t(note_text):
    m = re.findall('(([y]*(p|c)*[T][0-4]([abc]|is(?![a-zA-Z])|IS(?![a-zA-Z]))*))',str(note_text))
    s=''
    if len(m)>0:
        for i in m:
            s = s+i[0]+' '
    else:
        m = re.findall('([y]*(p|c)*[T](is(?![a-zA-Z])|IS(?![a-zA-Z])))',str(note_text))
        #print(m)
        for i in m:
            s = s+i[0]+' '
        
        
    if len(s)>0:
        #print(s)
        return s
        
    return None

def extract_staging(txt):
    
    M = txt[0]
    T = txt[1]
    N = txt[2]
    total = txt[3]
    ajcc = txt[4]
    overallstage = ''
    if(ajcc is not None):
        overallstage = ajcc
    elif(ajcc is None):
        if (M is not None):
            if 'm1' in M.lower():
            #if 'm1' in M.lower() or 'metastatic' in M.lower():
                    overallstage = 'Stage IV'
                    return overallstage
        if total is not None :
            if 'm1' in total.lower():
                overallstage = 'Stage IV'
                return overallstage
        if T is not None and N is not None:
            if 'tis' in T.lower() and 'n0' in N.lower():
                    overallstage = 'Stage 0'
                    return overallstage
            elif 't1a' in T.lower() and 'n0' in N.lower():
                    overallstage = 'Stage IA'
                    return overallstage
            elif 't1b' in T.lower() and 'n0' in N.lower():
                    overallstage = 'Stage IB'
                    return overallstage
            elif 't1' in T.lower() and 'n0' in N.lower():
                    overallstage = 'Stage I'
                    return overallstage
            elif 't2' in T.lower() and 'n0' in N.lower():
                    overallstage = 'Stage II'
                    return overallstage
            elif 't3' in T.lower() and 'n0' in N.lower():
                overallstage = 'Stage IIIA'
                return overallstage
            elif 't4' in T.lower() and 'n0' in N.lower():
                overallstage = 'Stage IIIB'
                return overallstage
            elif 't' in T.lower() and 'n1' in N.lower():
                overallstage = 'Stage IIIB'
                return overallstage
        if total is not None and N is not None:
            if 'tis' in total.lower() and 'n0' in total.lower():
                overallstage = 'Stage 0'
                return overallstage
            elif 't1a' in total.lower() and 'n0' in total.lower():
                    overallstage = 'Stage IA'
                    return overallstage
            elif 't1b' in total.lower() and 'n0' in total.lower():
                    overallstage = 'Stage IB'
                    return overallstage
            elif 't1' in total.lower() and 'n0' in total.lower():
                    overallstage = 'Stage I'
                    return overallstage
            elif 't2' in total.lower() and 'n0' in total.lower():
                    overallstage = 'Stage II'
                    return overallstage
            elif 't3' in total.lower() and 'n0' in total.lower():
                overallstage = 'Stage IIIA'
                return overallstage
            elif 't4' in total.lower() and 'n0' in total.lower():
                overallstage = 'Stage IIIB'
            elif 't' in total.lower() and 'n1' in total.lower():
                overallstage = 'Stage IIIB'
                return overallstage
        elif T is not None:
            overallstage = 'NOT ENOUGH INFORMATION'        
        else:
            overallstage = 'NOT ENOUGH INFORMATION'

        
    return overallstage

def find_spread_cholang(note_text):
    m = re.findall('((?:Spread|advanced)[^.;]*\s+(?:bile duct|lymph node|lymph nodes|bone|bones|lung|lungs))',str(note_text))
    s=''
    if len(m)>0 :
        for i in m:
            s = s+i[0]+' '
    if len(s)>0:
        return s[-1]
        
    return None


def calc_ajcc_stage_cancer(row):
    
    if str(row['AJCC Stage']) != 'nan': #and (str(row['CholangioCA']) != 'nan' or (str(row['HCC']) == 'nan' and str(row['CholangioCA']) == 'nan')):
        #print(row['MRN'])
        if str(row['AJCC Stage']) != 'nan':
            row['AJCC Stage found'] = str(row['AJCC Stage'])

    elif str(row['Overall stage']) != 'nan' and (str(row['CholangioCA']) != 'nan' or (str(row['HCC']) == 'nan' and str(row['CholangioCA']) == 'nan')):
        row['AJCC Stage calc'] = str(row['Overall stage'])
        #print('Overall stage')
    
    elif str(row['Stage Impr']) !=  'nan' and (str(row['CholangioCA']) != 'nan' or (str(row['HCC']) == 'nan' and str(row['CholangioCA']) == 'nan')):
        note_text = str(row['Stage Impr'])
        split_text = note_text.split(',')
        # print(row['MRN'])
        # print(split_text)
        # print(note_text)
        ajcc_stage = ''
        num = ''
        size = ''
        spread_list = [item.strip().lower() for item in row['Spread of cancer'].split(',')]
        if pd.notna(note_text) and note_text is not None:
            num = split_text[0]
            #print(num)
            size = split_text[1]
            #print(size)

            if int(num) <=1 and float(size) <= 5.0:
                ajcc_stage = "Stage IA"
            if int(num) <=1 and float(size) > 5.0:
                ajcc_stage = "Stage IB"
            if int(num) >=2 and 'lymph' not in spread_list:
                ajcc_stage = "Stage II"
            if 'bile duct' in spread_list:
                ajcc_stage = "Stage IIIA"
            if 'lymph' in spread_list:
                ajcc_stage = "Stage IIIB"
            row['AJCC Stage calc'] = ajcc_stage

    elif str(row['Stage Narr']) != 'nan' and (str(row['CholangioCA']) != 'nan' or (str(row['HCC']) == 'nan' and str(row['CholangioCA']) == 'nan')):
        note_text = str(row['Stage Narr'])
        split_text = note_text.split(',')
        # print(row['MRN'])
        # print(split_text)
        # print(note_text)
        bclc_stage = ''
        num = ''
        size = ''
        spread_list = [item.strip().lower() for item in row['Spread of cancer'].split(',')]
        if pd.notna(note_text) and note_text is not None:
            num = split_text[0]
            #print(num)
            size = split_text[1]
            #print(size)

            if int(num) <=1 and float(size) <= 5.0:
                ajcc_stage = "Stage IA"
            if int(num) <=1 and float(size) > 5.0:
                ajcc_stage = "Stage IB"
            if int(num) >=2 and 'lymph' not in spread_list:
                ajcc_stage = "Stage II"
            if 'bile duct' in spread_list:
                ajcc_stage = "Stage IIIA"
            if 'lymph' in spread_list:
                ajcc_stage = "Stage IIIB"
            row['AJCC Stage calc'] = ajcc_stage
 
    elif (row['Stage Impr'] == '' and row['Stage Narr'] == '') and (str(row['CholangioCA']) != ''or (str(row['HCC']) == 'nan' and str(row['CholangioCA']) == 'nan')) and str(row['AJCC Stage']) == 'nan':
        print('NOT ENOUGH INFORMATION')
        #print(row['MRN'])
        row['AJCC Stage calc'] = 'NOT ENOUGH INFORMATION'
        
    return row    

def calc_final_stage(row):
    row['Stage BCLC(f/calc)'] = str(row['BCLC Stage found']) + '/' + str(row['BCLC Stage calc'])
    row['Stage AJCC(f/calc)'] = str(row['AJCC Stage found']) + '/' + str(row['AJCC Stage calc'])
    print(row['MRN'])
    print(row['Stage BCLC(f/calc)'])
    print(row['Stage AJCC(f/calc)'])

    return row

def calc_add_info(row):

    values = [str(row[col]) for col in ['CholangioCA', 'HCC', 'Liver transplant', 'Portal Invasion'] if pd.notna(row[col])]
    # Join the non-NaN values with a comma
    row['Additional info'] = ', '.join(values)
    
    return row

def is_valid_string(s):
    if s is None:
        return False
    if isinstance(s, float) and math.isnan(s):
        return False
    if not s.strip():
        return False
    return True

if __name__ == '__main__':
    
    #Connect to the database
    sqlite = sqlite3.connect('disrupt.db')

    #Path to the files
    pathtonote=r"pathtonote"
    pathtoimage= r"pathtoimaging"
    pathtocohort= r"pathtocohort"
    
    #Reading files
    df_coh = pd.read_csv(pathtocohort,encoding='utf8')

    df = pd.read_csv('pathtolabs')

    df_image = pd.read_csv(pathtoimage,encoding='utf8')
    df_image.rename(columns = {'SERVICEDATE':'SERVICE_DATE', 'NARRATIVE':'TEXT'}, inplace = True)
    df_image = df_image.fillna('')
    df_image.sort_values(by='SERVICE_DATE',inplace=True, ascending= False)
    df_image['TEXT+DATE'] = df_image['SERVICE_DATE']+'  '+df_image['TEXT'] + '  '+df_image['IMPRESSION']
    print('num of records: ',len(df_image))
    print('unique patients: ',df_image.MRN.nunique(),'\n')
    df_image['TYPE'] = 'imaging'
    df_image.reset_index(inplace = True)
    df_image.drop('index', axis=1,inplace = True)
    
    df_path1 = pd.read_csv(pathtonote,encoding='windows-1252',on_bad_lines = 'warn')#utf-8 windows-1252 encoding='windows-1252'
    df_path1.sort_values(by='SERVICE_DATE',inplace=True, ascending= False)
    df_path1 = df_path1.fillna('')
    df_path1['TEXT'] = df_path1['SERVICE_DATE'] + df_path1['TEXT_1'] +'  '+ df_path1['TEXT_2']  
    df_path1['TEXT+DATE'] = df_path1['SERVICE_DATE']+'  '+df_path1['TEXT_1'] + df_path1['TEXT_2']  
    df_path1.reset_index(inplace = True)
    df_path1.drop('index', axis=1,inplace = True)

    df_path = df_path1

    
    #Creating result dataframe
    df_res = pd.DataFrame(columns=['MRN', 'BIRTHDATE', 'UP_COMING_APPT_DATE', 'PROVIDER_NAME'])
    # Copy data from df_coh to df_res
    df_res['MRN'] = df_coh['MRN']
    df_res['BIRTHDATE'] = df_coh['BIRTHDATE']
    df_res['UP_COMING_APPT_DATE'] = df_coh['UP_COMING_APPT_DATE']
    df_res['PROVIDER_NAME'] = df_coh['PROVIDER_NAME']
    #df_res.to_excel('liver_coh_result.xlsx', index=False)

    #Lab results
    df_filtered = df.drop_duplicates(subset=['MRN', 'LAB_GROUP'], keep='last')
    #df_filtered.to_excel('labresult1.xlsx', index=False)
    df_pivot = df_filtered.pivot(index='MRN', columns='LAB_GROUP', values='NUMERICVALUE').reset_index()
    df_pivot.fillna('', inplace=True)
    df_res = pd.merge(df_res,df_pivot,on='MRN',how='outer')
    #df_res.to_excel('labresult2.xlsx', index=False)
    
    #Checking for cholangio
    df_path['CholangioCA'] = df_path['TEXT'].apply(find_cholangioca_cancer)
    df_ct2 = df_path.dropna(subset=['CholangioCA'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['CholangioCA'].unique().to_frame()
    df_ct2.reset_index(inplace=True)
    df_ct2['CholangioCA'] = df_ct2['CholangioCA'].apply(lambda x: x[0])
    #df_ct2.to_excel('liver_cholangiocaprogrnotes.xlsx')
    df_res = pd.merge(df_res,df_ct2,on='MRN',how='outer')
    

    #Metast cancer
    df_path['MetastCA'] = df_path['TEXT'].apply(find_metastca_cancer)
    df_ct2 = df_path.dropna(subset=['MetastCA'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['MetastCA'].unique().to_frame()
    df_ct2.reset_index(inplace=True)
    df_ct2['MetastCA'] = df_ct2['MetastCA'].apply(lambda x: x[0])
    #df_ct2.to_excel('liver_metast_ca_progrnotes.xlsx')
    df_res = pd.merge(df_res,df_ct2,on='MRN',how='outer')

    #HCC
    df_path['HCC'] = df_path['TEXT'].apply(find_HCC_cancer)
    df_ct2 = df_path.dropna(subset=['HCC'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['HCC'].unique().to_frame()
    df_ct2.reset_index(inplace=True)
    df_ct2['HCC'] = df_ct2['HCC'].apply(lambda x: x[0])
    #df_ct2.to_excel('liver_hcc_progrnotes.xlsx')
    df_res = pd.merge(df_res,df_ct2,on='MRN',how='outer')

    #Liver transplant
    df_path['Liver transplant'] = df_path['TEXT'].apply(find_liver_transplant)
    df_ct2 = df_path.dropna(subset=['Liver transplant'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Liver transplant'].unique().to_frame()
    df_ct2.reset_index(inplace=True)
    df_ct2['Liver transplant'] = df_ct2['Liver transplant'].apply(lambda x: x[0])
    #df_ct2.to_excel('liver_transplant_notes.xlsx')
    df_res = pd.merge(df_res,df_ct2,on='MRN',how='outer')

    #Portal invasion
    df_path['Portal Invasion'] = df_path['TEXT'].apply(find_portal_invasion)
    df_ct2 = df_path.dropna(subset=['Portal Invasion'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Portal Invasion'].unique().to_frame()
    df_ct2.reset_index(inplace=True)
    df_ct2['Portal Invasion'] = df_ct2['Portal Invasion'].apply(lambda x: x[0])
    #df_ct2.to_excel('liver_port_invasion_notes.xlsx')
    
    df_image['Portal Invasion'] = df_image['TEXT'].apply(find_portal_invasion)
    df_ct = df_image.dropna(subset=['Portal Invasion'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Portal Invasion'].unique().to_frame()
    df_ct.reset_index(inplace=True)
    df_ct['Portal Invasion'] = df_ct['Portal Invasion'].apply(lambda x: x[0])
    #df_ct.to_excel('liver_port_invasion_imaging.xlsx')    
    df_res = pd.merge(df_res,df_ct,on='MRN',how='outer')

    #Child-Pugh found
    df_path['Child-Pugh found'] = df_path['TEXT'].apply(find_child_pugh)
    df_ct = df_path.dropna(subset=['Child-Pugh found'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Child-Pugh found'].unique().to_frame()
    df_ct.reset_index(inplace=True)
    df_ct['Child-Pugh found'] = df_ct['Child-Pugh found'].apply(lambda x: x[0])
    #df_path.to_excel('liver_child_pugh2.xlsx')
    #df_ct.to_excel('liver_child_pugh.xlsx')
    df_res = pd.merge(df_res,df_ct,on='MRN',how='outer')


    #Ascites imaging
    df_image['Ascites(f/calc)'] = df_image['TEXT'].apply(find_ascites)
    df_ct = df_image.dropna(subset=['Ascites(f/calc)'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Ascites(f/calc)'].unique().to_frame()
    df_ct.reset_index(inplace=True)
    df_ct['Ascites(f/calc)'] = df_ct['Ascites(f/calc)'].apply(lambda x: x[0])
    #df_ct.to_excel('liver_ascites_imaging.xlsx')
    df_res = pd.merge(df_res,df_ct,on='MRN',how='outer')
    #Ascites notes
    df_path1['Ascites(f/calc)'] = df_path1['TEXT'].apply(find_ascites)
    df_ct = df_path1.dropna(subset=['Ascites(f/calc)'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Ascites(f/calc)'].unique().to_frame()
    df_ct.reset_index(inplace=True)
    df_ct['Ascites(f/calc)'] = df_ct['Ascites(f/calc)'].apply(lambda x: x[0])
    #df_ct.to_excel('liver_ascites_notes.xlsx')

    #Encephalopathy
    df_path['Encephalopathy(f/calc)'] = df_path['TEXT'].apply(find_encephalopathy)
    df_ct4 = df_path.dropna(subset=['Encephalopathy(f/calc)'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Encephalopathy(f/calc)'].unique().to_frame()
    df_ct4.reset_index(inplace=True)
    df_ct4['Encephalopathy(f/calc)'] = df_ct4['Encephalopathy(f/calc)'].apply(lambda x: x[0])
    #df_ct4.to_excel('liver_encephalopathy.xlsx')
    df_res = pd.merge(df_res,df_ct4,on='MRN',how='outer')

    #Child-Pugh calculated
    df_res['Child-Pugh calculated'] = np.nan
    #df_res.replace('', inplace=True)
    df_res = df_res.apply(calc_child_pugh, axis=1)

    #ECOG
    df_path['ECOG_T'] = df_path['TEXT'].apply(find_ecog)
    df_ct2 = df_path.dropna(subset=['ECOG_T'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['ECOG_T'].unique().to_frame()
    df_ct2.reset_index(inplace=True)
    df_ct2['ECOG_T'] = df_ct2['ECOG_T'].apply(lambda x: x[0])
    #df_ct2.to_excel('liver_ecogt.xlsx')
    #ECOG extracting numbers
    df_path['ECOG'] = df_path['ECOG_T'].apply(extract_number)
    df_ct2 = df_path.dropna(subset=['ECOG'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['ECOG'].unique().to_frame()
    df_ct2.reset_index(inplace=True)
    df_ct2['ECOG'] = df_ct2['ECOG'].apply(lambda x: x[0])
    #df_ct2.to_excel('liver_ecog.xlsx')
    df_res = pd.merge(df_res,df_ct2,on='MRN',how='outer')

    #AJCC stage
    df_path['AJCC Stage'] = df_path['TEXT'].apply(find_stage_cancer)
    df_ct4 = df_path.dropna(subset=['AJCC Stage'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['AJCC Stage'].unique().to_frame()
    df_ct4.reset_index(inplace=True)
    df_ct4['AJCC Stage'] = df_ct4['AJCC Stage'].apply(lambda x: x[0])
    #df_ct4.to_excel('liver_stage_template.xlsx')
    df_res = pd.merge(df_res,df_ct4,on='MRN',how='outer')

    #BCLC stage
    df_path['BCLC Stage'] = df_path['TEXT'].apply(find_bclc_stage_cancer)
    df_ct4 = df_path.dropna(subset=['BCLC Stage'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['BCLC Stage'].unique().to_frame()
    df_ct4.reset_index(inplace=True)
    df_ct4['BCLC Stage'] = df_ct4['BCLC Stage'].apply(lambda x: x[0])
    #df_ct4.to_excel('liver_bclc_stage_template.xlsx')
    df_res = pd.merge(df_res,df_ct4,on='MRN',how='outer')

    
    #Size of the tumor imaging Narrative
    df_image['Stage Narr'] = df_image['TEXT'].apply(find_stage_size)
    df_ct = df_image.dropna(subset=['Stage Narr'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Stage Narr'].unique().to_frame()
    df_ct.reset_index(inplace=True)
    df_ct['Stage Narr'] = df_ct['Stage Narr'].apply(lambda x: x[0])
    #df_ct.to_excel('liver_stage_imagingnarr.xlsx')

    df_res['MRN'] = df_res['MRN'].astype(str)
    df_ct['MRN'] = df_ct['MRN'].astype(str)

    df_res = pd.merge(df_res,df_ct,on='MRN',how='outer')
    #Imaging Impression
    df_image['Stage Impr'] = df_image['IMPRESSION'].apply(find_stage_size)
    df_ct = df_image.dropna(subset=['Stage Impr'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Stage Impr'].unique().to_frame()
    df_ct.reset_index(inplace=True)
    df_ct['Stage Impr'] = df_ct['Stage Impr'].apply(lambda x: x[0])
    #df_ct.to_excel('liver_stage_imagingimpr.xlsx')

    df_res['MRN'] = df_res['MRN'].astype(str)
    df_ct['MRN'] = df_ct['MRN'].astype(str)
    
    df_res = pd.merge(df_res,df_ct,on='MRN',how='outer')
    #Notes
    df_path1['Stage Notes'] = df_path1['TEXT'].apply(find_stage_size)
    df_ct = df_path1.dropna(subset=['Stage Notes'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Stage Notes'].unique().to_frame()
    df_ct.reset_index(inplace=True)
    df_ct['Stage Notes'] = df_ct['Stage Notes'].apply(lambda x: x[0])
    #df_ct.to_excel('liver_stage_notes.xlsx')
    df_res['MRN'] = df_res['MRN'].astype(str)
    df_ct['MRN'] = df_ct['MRN'].astype(str)
    df_res = pd.merge(df_res,df_ct,on='MRN',how='outer')

    #Cholangio stage
    df_path['T'] = df_path['TEXT'].apply(find_match_t)
    df_path['N'] = df_path['TEXT'].apply(find_match_n)
    df_path['M'] = df_path['TEXT'].apply(find_match_m)
    df_path['all'] = df_path['TEXT'].apply(find_match_all)
    df_path['AJCC'] = df_path['TEXT'].apply(find_stage_cancer)
    df_path.reset_index(inplace = True)
    df_path.head(2)

    
    dft = df_path.dropna(subset = ['T'], axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['T'].unique().to_frame()
    dft.reset_index(inplace=True)
    dft['T'] = dft['T'].apply(lambda x: x[0].split(' ')[0])
    dft.head(2)

    dfm = df_path.dropna(subset = ['M'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['M'].unique().to_frame()
    dfm.reset_index(inplace=True)
    #print(len(dfm))
    dfm['M'] = dfm['M'].apply(lambda x: x[0].split(' ')[0])
    dfm.head(2)

    dfn = df_path.dropna(subset=['N'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['N'].unique().to_frame()
    dfn.reset_index(inplace=True)
    dfn['N'] = dfn['N'].apply(lambda x: x[0].split(' ')[0])
    #print(len(dfn))
    dfn.head(2)

    df_all = df_path.dropna(subset=['all'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['all'].unique().to_frame()
    df_all.reset_index(inplace=True)
    df_all['all'] = df_all['all'].apply(lambda x: x[0].split(' ')[0])
    #print(len(df_all))
    df_all.head(2)

    df_st = df_path.dropna(subset=['AJCC'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['AJCC'].unique().to_frame()
    df_st.reset_index(inplace=True)
    #print(len(df_st))
    df_st['AJCC'] = df_st['AJCC'].apply(lambda x: x[0])
    df_st.head(5)

    
    df_f = pd.merge(dfm,dfn,on='MRN',how='outer')
    #print(len(df_f))
    df_f = pd.merge(df_f,dft,on='MRN',how='outer')
    #print(len(df_f))
    df_f['MRN'] = df_f['MRN'].astype(str)
    df_ct['MRN'] = df_ct['MRN'].astype(str)
    df_st['MRN'] = df_st['MRN'].astype(str)
    df_all['MRN'] = df_all['MRN'].astype(str)
    df_f.head(2)
    df_f = pd.merge(df_f,df_all,on='MRN',how='outer')
    df_f = pd.merge(df_f,df_ct,on='MRN',how='outer')
    df_f = pd.merge(df_f,df_st,on='MRN',how='outer')
    df_f = df_f.where(pd.notnull(df_f), None)
    #print(len(df_f))
    df_f.head(3)


    df_f ['Overall stage'] = df_f[['M','T','N','all','AJCC']].apply(extract_staging,axis=1)
    set(df_f['all'].values)
    df_f.to_excel('result_v12.xlsx')
    df_res = pd.merge(df_res,df_f,on='MRN',how='outer')
    #df_res.to_excel('liver_res2.xlsx')

    #Spread of cancer
    df_path['Spread of cancer'] = df_path['TEXT'].apply(find_spread_cholang)
    df_ct4 = df_path.dropna(subset=['Spread of cancer'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Spread of cancer'].unique().to_frame()
    df_ct4.reset_index(inplace=True)
    df_ct4['Spread of cancer'] = df_ct4['Spread of cancer'].apply(lambda x: x[0])
    #df_ct4.to_excel('liver_bclc_stage_template.xlsx')
    df_ct4['MRN'] = df_ct4['MRN'].astype(str)
    df_res = pd.merge(df_res,df_ct4,on='MRN',how='outer')

    #Calculating stages
    df_res['BCLC Stage calc'] = np.nan
    df_res['BCLC Stage found'] = np.nan
    df_res.to_excel('liver_res.xlsx')
    df_res.replace('', inplace=True)
    df_path1.sort_values(by='MRN',inplace=True)
    df_res = df_res.apply(calc_bclc_stage_cancer, axis=1)

    df_res['AJCC Stage calc'] = np.nan
    df_res['AJCC Stage found'] = np.nan
    df_res.replace('', inplace=True)
    df_res = df_res.apply(calc_ajcc_stage_cancer, axis=1)

    #Final files
    df_path.to_excel('df_path1.xlsx')
    #df_res.to_excel('liver_final_text.xlsx')
    df_res['Stage BCLC(f/calc)'] = np.nan
    df_res['Stage AJCC(f/calc)'] = np.nan
    df_res.replace('', inplace=True)

    df_res['Stage BCLC(f/calc)'] = df_res.apply(lambda row: ('' if str(row['BCLC Stage found']) == 'nan' else str(row['BCLC Stage found']) + '/') + ('' if pd.isna(row['BCLC Stage calc']) else '/' + str(row['BCLC Stage calc'])), axis=1)
    df_res['Stage AJCC(f/calc)'] = df_res.apply(lambda row: ('' if pd.isna(row['AJCC Stage found']) else str(row['AJCC Stage found']) + '/') + ('' if pd.isna(row['AJCC Stage calc']) else '/' + str(row['AJCC Stage calc'])), axis=1)

    #Additional info
    df_res['Additional info'] = ''
    df_res = df_res.apply(calc_add_info, axis=1)
    
    df_res.to_excel('liver_final_text.xlsx')
    
    sqlite_cursor = sqlite.cursor()
    ecog = math.nan
    print("processing results into sqlite")
    index = 1
    if df_f is not None:
        for _, row in df_res.iterrows():
            sqlite_cursor.execute("insert into patient (pat_id, mrn, dob, cancer_type, date_screened) values ('%(pat_id)s','%(mrn)s','%(dob)s','%(disease)s','%(now)s')" % {'pat_id': index, 'mrn': row['MRN'], 'dob': row['BIRTHDATE'], 'disease': 'Liver',  'now': datetime.now()})
            if str(row['BCLC Stage found']) != 'nan':
                cp = None
                if str(row['Child-Pugh found']) != 'nan':
                    cp = str(row['Child-Pugh found'])
                    #print('BCLC found' + str(row['Child-Pugh found']) + str(row['ECOG']))
                elif str(row['Child-Pugh calculated']) != 'nan':
                    cp = str(row['Child-Pugh calculated'])
                    #print('BCLC calc' + str(row['Child-Pugh calculated']) + str(row['ECOG']))
                if not math.isnan(row['ECOG']):
                    ecog = str(int(row['ECOG']))
                sqlite_cursor.execute ("insert into patient_bclc (fk_id, stage_bclc, child_pugh, ecog) values (%(pat_id)s,'%(stage)s','%(child_pugh)s','%(ecog)s')" % {'pat_id': index, 'stage': row['BCLC Stage found'].replace('/', ''), 'child_pugh': cp, 'ecog': ecog})
            if str(row['BCLC Stage calc']) != 'nan':
                cp = None
                if str(row['Child-Pugh found']) != 'nan':
                    cp = str(row['Child-Pugh found'])
                    #print(str('BCLC found' + row['Child-Pugh found']) + str(row['ECOG']))
                elif str(row['Child-Pugh calculated']) != 'nan':
                    cp = str(row['Child-Pugh calculated'])
                    #print(str('BCLC calc' + row['Child-Pugh calculated']) + str(row['ECOG']))
                if not math.isnan(row['ECOG']):
                    ecog = str(int(row['ECOG']))
                sqlite_cursor.execute ("insert into patient_bclc (fk_id, stage_bclc, child_pugh, ecog) values (%(pat_id)s,'%(stage)s','%(child_pugh)s','%(ecog)s')" % {'pat_id': index, 'stage': row['BCLC Stage calc'].replace('/', ''), 'child_pugh': cp, 'ecog': ecog})   
            if str(row['BCLC Stage found']) == 'nan' and str(row['BCLC Stage calc']) == 'nan':
                cp = None
                if str(row['Child-Pugh found']) != 'nan':
                    cp = str(row['Child-Pugh found'])
                    #print(str('BCLC found' + row['Child-Pugh found']) + str(row['ECOG']))
                elif str(row['Child-Pugh calculated']) != 'nan':
                    cp = str(row['Child-Pugh calculated'])
                    #print(str('BCLC calc' + row['Child-Pugh calculated']) + str(row['ECOG']))
                if not math.isnan(row['ECOG']):
                    ecog = str(int(row['ECOG']))
                sqlite_cursor.execute ("insert into patient_bclc (fk_id, stage_bclc, child_pugh, ecog) values (%(pat_id)s,'%(stage)s','%(child_pugh)s','%(ecog)s')" % {'pat_id': index, 'stage': None, 'child_pugh': cp, 'ecog': ecog})   

            
            if str(row['AJCC Stage found']) != 'nan':
                cp = None
                if str(row['Child-Pugh found']) != 'nan':
                    cp = str(row['Child-Pugh found'])
                elif str(row['Child-Pugh calculated']) != 'nan':
                    cp = str(row['Child-Pugh calculated'])
                if not math.isnan(row['ECOG']):
                    ecog = str(int(row['ECOG']))
                sqlite_cursor.execute ("insert into patient_ajcc (fk_id, stage_ajcc, child_pugh, ecog) values (%(pat_id)s,'%(stage)s','%(child_pugh)s','%(ecog)s')" % {'pat_id': index, 'stage': row['AJCC Stage found'].replace('/', ''), 'child_pugh': cp, 'ecog': ecog})
                #print()
            if str(row['AJCC Stage calc']) != 'nan':
                cp = None
                if str(row['Child-Pugh found']) != 'nan':
                    cp = str(row['Child-Pugh found'])
                elif str(row['Child-Pugh calculated']) != 'nan':
                    cp = str(row['Child-Pugh calculated'])
                if not math.isnan(row['ECOG']):
                    ecog = str(int(row['ECOG']))
                sqlite_cursor.execute ("insert into patient_ajcc (fk_id, stage_ajcc, child_pugh, ecog) values (%(pat_id)s,'%(stage)s','%(child_pugh)s','%(ecog)s')" % {'pat_id': index, 'stage': row['AJCC Stage calc'].replace('/', ''), 'child_pugh': cp, 'ecog': ecog})   
                if str(row['AJCC Stage found']) == 'nan' and str(row['AJCC Stage calc']) == 'nan':
                    cp = None
                    if str(row['Child-Pugh found']) != 'nan':
                        cp = str(row['Child-Pugh found'])
                    elif str(row['Child-Pugh calculated']) != 'nan':
                        cp = str(row['Child-Pugh calculated'])
                    if not math.isnan(row['ECOG']):
                        ecog = str(int(row['ECOG']))
                    sqlite_cursor.execute ("insert into patient_ajcc (fk_id, stage_ajcc, child_pugh, ecog) values (%(pat_id)s,'%(stage)s','%(child_pugh)s','%(ecog)s')" % {'pat_id': index, 'stage': None, 'child_pugh': cp, 'ecog': ecog})   

            index+=1    

    sqlite.commit()
    sqlite.close()
    today = datetime.today()
    print(today.strftime("%Y/%m/%d %H:%M:%S"))
    

    df_res = df_res.rename(columns={'UP_COMING_APPT_DATE': 'Appointment date','PROVIDER_NAME': 'Provider name'})
    df_res = df_res[['MRN', 'Appointment date', 'Provider name', 'Albumin', 'INR', 'Total Bilirubin', 'Ascites(f/calc)', 'Encephalopathy(f/calc)','Child-Pugh found','Child-Pugh calculated','ECOG','Stage BCLC(f/calc)','Stage AJCC(f/calc)','Additional info']]
    df_res = df_res.sort_values(by='MRN')    
    df_res.to_excel('liver_final.xlsx')











Matcher




import os
from datetime import datetime
import sqlite3
import csv
import pandas as pd
import numpy as np
import time

#Extracting trials from database
def trialres():
    sql = """SELECT trial.nci_number, trial_cancer_type.cancer_type, trial_inform.stage, trial_inform.child_pugh, trial_inform.ecog
    FROM trial
    left JOIN trial_cancer_type ON trial.pk_id = trial_cancer_type.fk_id 
    left JOIN trial_inform ON trial.pk_id = trial_inform.fk_id """



    cursor.execute(sql)
    results = cursor.fetchall()
    today = datetime.today()
    print(today.strftime("%Y/%m/%d %H:%M:%S"))


    df = pd.DataFrame({'NCI_NUMBER': pd.Series(dtype='str'),
                       'CANCER_TYPE': pd.Series(dtype='str'),
                       'STAGE': pd.Series(dtype='str'),
                       'CHILD-PUGH': pd.Series(dtype='str'),
                       'ECOG': pd.Series(dtype='str')})
    i = 0
    for nci_number,cancer_type,stage,child_pugh,ecog in results:
        df.loc[i, ['NCI_NUMBER', 'CANCER_TYPE', 'STAGE', 'CHILD-PUGH', 'ECOG']] = nci_number,cancer_type,stage,child_pugh,ecog
        i+=1

    df1 = df.replace(np.nan,'',regex=True)
    df1.head(10)


    # group by col1 and aggregate the other columns
    grouped = df1.groupby('NCI_NUMBER').agg({'CANCER_TYPE': lambda x: ','.join(set(x)),
                                      'STAGE': lambda x: ','.join(set(x)),
                                      'CHILD-PUGH': lambda x: ','.join(set(map(str, set(x)))),
                                      'ECOG': lambda x: ','.join(set(map(str, set(x))))})

    # reset the index to make col1 a regular column
    df2 = grouped.reset_index()

    # rename the columns
    df2.columns = ['NCI_NUMBER', 'CANCER_TYPE', 'STAGE', 'CHILD-PUGH', 'ECOG']

    
    # Print the final DataFrame
    df2.to_excel('trialsresult_v1.xlsx')
    
    return df2

#Extracting patients from database
def patres():
    sql = """SELECT patient.mrn, patient.dob, patient.cancer_type, patient.date_screened, patient_bclc.stage_bclc, patient_ajcc.stage_ajcc, patient_bclc.child_pugh, patient_bclc.ecog
    FROM patient
    left JOIN patient_bclc ON patient.pk_id = patient_bclc.fk_id 
    left JOIN patient_ajcc ON patient.pk_id = patient_ajcc.fk_id"""


    cursor.execute(sql)
    results = cursor.fetchall()
    today = datetime.today()
    print(today.strftime("%Y/%m/%d %H:%M:%S"))


    p_df = pd.DataFrame({'MRN': pd.Series(dtype='str'),
                       'CANCER_TYPE': pd.Series(dtype='str'),
                       'STAGE BCLC': pd.Series(dtype='str'),
                       'STAGE AJCC': pd.Series(dtype='str'),
                       'CHILD-PUGH': pd.Series(dtype='str'),
                       'ECOG': pd.Series(dtype='str')})
    i = 0
    for mrn,dob,cancer_type,date_screened,stage_bclc,stage_ajcc,child_pugh,ecog in results:
        p_df.loc[i, ['MRN', 'CANCER_TYPE', 'STAGE BCLC', 'STAGE AJCC', 'CHILD-PUGH','ECOG']] = mrn,cancer_type,stage_bclc,stage_ajcc,child_pugh,ecog
        i+=1

    p_df1 = p_df.replace(np.nan,'',regex=True)
    p_df1.head(10)


    # group by col1 and aggregate the other columns
    grouped = p_df1.groupby('MRN').agg({'CANCER_TYPE': lambda x: ','.join(set(x)),
                                      'STAGE BCLC': lambda x: ','.join(set(map(str, set(x)))),
                                      'STAGE AJCC': lambda x: ','.join(set(map(str, set(x)))),
                                      'CHILD-PUGH': lambda x: ','.join(set(map(str, set(x)))),
                                      'ECOG': lambda x: ','.join(set(map(str, set(x))))})

    # reset the index to make col1 a regular column
    p_df2 = grouped.reset_index()

    # rename the columns
    p_df2.columns = ['MRN', 'CANCER_TYPE', 'STAGE BCLC', 'STAGE AJCC', 'CHILD-PUGH','ECOG']

    p_df2.to_excel('patientsresult_v1.xlsx')
    
    return p_df2
    

#Matching patients with trials    
def match(df2, p_df2):
    final_data = []

    for index_p, row_p in p_df2.iterrows():
        p_mrn = row_p['MRN']
        p_cancer_type = row_p['CANCER_TYPE']
        p_stage_bclc = row_p['STAGE BCLC']
        p_stage_ajcc = row_p['STAGE AJCC']
        p_stage_ajcc = p_stage_ajcc.replace("1", "I")
        p_child_pugh = row_p['CHILD-PUGH']
        p_ecog = row_p['ECOG']
        # Extract individual receptor values from p_df2
        id_match = 0
        for index_d, row_d in df2.iterrows():
            #print(row_d)
            nci_number = row_d['NCI_NUMBER']
            df_cancer_type = row_d['CANCER_TYPE']
            df_stage = row_d['STAGE']
            df_child_pugh = row_d['CHILD-PUGH']
            df_ecog = row_d['ECOG']
            # Check if the cancer type and stage match
            if (p_cancer_type == df_cancer_type or df_cancer_type == '' or p_cancer_type == ''):
                df_stages = df_stage.split(',')
                stage1 = stage2 = stage3 = stage4 = ''
                if 'Stage I' in df_stages:
                    stage1 = 'STAGE I'
                    print(stage1)
                if 'Stage II' in df_stages:
                    stage2 = 'STAGE II'
                    print(stage2)
                if 'Stage III' in df_stages:
                    stage3 = 'STAGE III'
                    print(stage3)
                if 'Stage IV' in df_stages:
                    stage4 = 'STAGE IV'
                    print(stage4)
                print(f'Patient stage: {p_stage_ajcc.strip()} Trial stages: {df_stages}')
                if ((any(p_stage_ajcc.strip().upper() == stage.strip().upper() for stage in df_stages)) or df_stages == '' or
                    (stage1 == 'STAGE I' and p_stage_ajcc.strip().upper() in ['STAGE I', 'STAGE IA','STAGE 1A', 'STAGE IB','STAGE 1B']) or
                    (stage2 == 'STAGE II' and p_stage_ajcc.strip().upper() in ['STAGE II', 'STAGE IIA', 'STAGE IIB']) or
                    (stage3 == 'STAGE III' and p_stage_ajcc.strip().upper() in ['STAGE III', 'STAGE IIIA', 'STAGE IIIB']) or
                    (stage4 == 'STAGE IV' and p_stage_ajcc.strip().upper() in ['STAGE IV', 'STAGE IVA', 'STAGE IVB', 'STAGE IVC'])):
                    print(f"Cancer and Stage AJCC matched for {p_mrn} and {nci_number}")
                    # Check if the child-pugh match
                    cp = ''
                    if 'A' in p_child_pugh:
                        cp = 'A'
                    if 'B' in p_child_pugh:
                        cp = 'B'
                    if 'C' in p_child_pugh:
                        cp = 'C'
                    #print()
                    df_cp = df_child_pugh.split(',')
                    #print(df_cp)
                    if((any(cp == child_pugh.strip() for child_pugh in df_cp)) or df_child_pugh == ''):
                        # Check if the ecog match
                        df_ec = df_ecog.split(',')
                        if((any(p_ecog.strip() == ecog.strip() for ecog in df_ec)) or df_ecog == ''):
                            # Create the matched row and append it to the final_data list
                            matched_row = [p_mrn, p_cancer_type, p_stage_ajcc, p_child_pugh, p_ecog, nci_number, df_cancer_type, df_stage, df_child_pugh, df_ecog]
                            final_data.append(matched_row)
                            id_match+=1
                            print(f"Matches {id_match}")
                if ((any(p_stage_bclc.strip() == stage.strip() for stage in df_stages)) or df_stages == ''):
                    print(f"Cancer and Stage BCLC matched for {p_mrn} and {nci_number}")
                    # Check if the child-pugh match
                    cp = ''
                    if 'A' in p_child_pugh:
                        cp = 'A'
                    if 'B' in p_child_pugh:
                        cp = 'B'
                    if 'C' in p_child_pugh:
                        cp = 'C'
                    #print(cp)
                    df_cp = df_child_pugh.split(',')
                    print(df_cp)
                    if((any(cp == child_pugh.strip() for child_pugh in df_cp)) or df_child_pugh == ''):
                        # Check if the ecog match
                        df_ec = df_ecog.split(',')
                        if((any(p_ecog.strip() == ecog.strip() for ecog in df_ec)) or df_ecog == ''):
                            # Create the matched row and append it to the final_data list
                            matched_row = [p_mrn, p_cancer_type, p_stage_bclc, p_child_pugh, p_ecog, nci_number, df_cancer_type, df_stage, df_child_pugh, df_ecog]
                            final_data.append(matched_row)
                            id_match+=1
                            print(f"Matches {id_match}")
                            
            if (index_d == df2.index.max()) and (id_match == 0):
                matched_row = [p_mrn, p_cancer_type, p_stage_ajcc, p_child_pugh, p_ecog, '', '', '', '', '']
                final_data.append(matched_row)
    # Create the final dataframe
    final = pd.DataFrame(final_data, columns=['MRN', 'Patient\'s Cancer Type', 'Patient\'s Stage', 'Patient\'s Child-Pugh', 'Patient\'s ECOG', 'NCI_NUMBER', 'Trial\'s title', 'Trial\'s Stage', 'Trial\'s Child-Pugh', 'Trial\'s ECOG'])
    final.sort_values(by=['MRN', 'Patient\'s Stage'], inplace=True)
    
    #Reading and merging files
    path2cohort= r"pathtocohort"
    df_coh_list = pd.read_csv(path2cohort,encoding='utf8')
    final['MRN'] = final['MRN'].astype('str')
    df_coh_list['MRN'] = df_coh_list['MRN'].astype('str')
    final2 = pd.merge(df_coh_list, final, on='MRN', how='outer')
    final2.rename(columns={'UP_COMING_APPT_DATE': 'Patient\'s Appointment'}, inplace=True)
    #Change columns order and sorting
    final2 = final2.reindex(columns=['MRN', 'Patient\'s Appointment', 'Patient\'s Cancer Type', 'Patient\'s Stage', 'Patient\'s Child-Pugh', 'Patient\'s ECOG', 'NCI_NUMBER', 'Trial\'s title', 'Trial\'s Stage', 'Trial\'s Child-Pugh', 'Trial\'s ECOG'])
    final2['MRN'] = final2['MRN'].astype(str)
    final2 = final2.sort_values(by=['MRN','Patient\'s Stage'])
    
    # Write the final dataframe to a CSV file
    final2.to_csv('matches.csv', index=False)




if __name__ == '__main__':
    
    #Database connection
    sqlite = sqlite3.connect('disrupt.db')
    sqlite_cursor = sqlite.cursor()
    cursor = sqlite.cursor()
    
    #Creating Dataframes
    p_df2 = pd.DataFrame()
    df2 = pd.DataFrame()
    
    #Initiating Dataframes
    df2 = trialres()
    p_df2 = patres()
    
    match(df2,p_df2)
    print(p_df2)
    print(df2)








Case identification




import pandas as pd
import numpy as np
import re
import os


def find_noprogress_cancer(note_text):
    #print(note_text['MRN'])
    m = re.findall('((Stable)|(Stable “x” treatment cavity)|(No new/viable HCC)|(No new HCC)|(No definite new HCC)|(Interval resolution)|(Resolution)|(Decrease in size)|(Decreased in size)|(Favorable tumor response)|(No evidence of)|(without evidence of (local)?(\s+)?(recurrence)?)|(resolution of previously)|(No (\S+)?(\s+)?(\S+)?(\s+)?nodal metastases)|(No (\S+)?(\s+)?(\S+)?(\s+)?suspicious)|(Stable)|(Interval resolution)|(Interval mild decrease)|(Slightly increased in FDG avidity)|(Slightly increased in size)|(No evidence of malignancy)|(Benign Findings)|(ABSENCE OF ENHANCEMENT)|(No (\S+)?(\s+)?(\S+)?(\s+)?evidence)|(No significant interval change)|(similar to (\S+)?(\s+)?(\S+)?(\s+)?prior exam)|(no significant change in the size)|(No (other)?(\s+)?(abnormal)?(\s+)?tracer)|(Mildly FDG)|(mild FDG)|(Unchanged (mildly)?(\s+)?(tracer)?)|(Decrease in size)|(Decreased in size)|(No (\S+)?(\s+)?(\S+)?(\s+)?metast\w*)|(favorable response to treatment)|(without abnormal FDG uptake)|(SLIGHT INTERVAL INCREASE IN SIZE)|(No FDG-avid distant metastases)|(No significant change in FDG)|(Mildly tracer)|(nonviable tumor))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "No Progress cancer"
        
    return np.nan

def find_progress_cancer(note_text):
    #print(note_text['MRN'])
    m = re.findall('((Compatible WITH PROGRESSION OF METASTATIC DISEASE)|(Progression of multifocal HCC)|(HCC progression)|(HCC recurrence)|(New nodules/ tumor)|(New recurrence/ lesion)|(New “x” segment “x” HCC)|(LIRADS score: 5)|(Progressive)|(Increase in size)|(Increased in size)|(Interval increase in size)|(Interval increased in size)|(Interval development of\s(?:\w+\s)*?(cancer|HCC)(\s)?\.)|(progression)|(relapse)|(no_response)|(metast)|(increased size of previous suspected)|(recurrent)|(increased)|(increase)|(worsened)|(FDG uptake)|(Interval development of[^.;]*\s+(metast\w*|HCC)))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "Progress cancer"
        
    return np.nan

def find_final_noprogress_cancer(note_text):
    #print(note_text['MRN'])
    m = re.findall('((No[^.;]*\s+nodal[^.;]*\s+metast\w*(?![.;]))|(No[^.;]*\s+evidence(?![.;]))|(No[^.;]*\s+metast\w*(?![.;]))|(No[^.;]*\s+FDG-avid[^.;]*\s+distant[^.;]*\s+metast\w*(?![.;]))|(Stable[^.;]*\s+metast\w*(?![.;]))|(SLIGHT\w*[^.;]*\s+INTERVAL[^.;]*\s+INCREASE[^.;]*\s+IN[^.;]*\s+SIZE(?![.;])))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "No Progress cancer"
        
    return np.nan

def find_final_progress_cancer(note_text):
    #print(note_text['MRN'])
    m = re.findall('((Interval[^.;]*\s+development[^.;]*\s+of[^.;]*\s+cancer(?![.;]))|(Interval[^.;]*\s+development[^.;]*\s+of[^.;]*\s+HCC(?![.;]))|(overall increased))',str(note_text),flags = re.IGNORECASE)

    s=''
    if len(m)>0 :
        for item in m:
            s = s+item[0]+','
    if len(s)>0:
        #print(s)
        return "Progress cancer"
        
    return np.nan

def prioritize_non_empty(series):
    return next((val for val in series if val != ''), '')

def aggregate_values(series):
    unique_values = series.unique()
    if len(unique_values) == 1:
        return unique_values[0]
    else:
        return ', '.join(unique_values.astype(str))



if __name__ == '__main__':
    
    #Path to the files
    path2note=r"pathtonote"
    path2cohort= r"pathtocohort"
    path2image= r"pathtoimaging"
    
    #Reading files
    df_coh = pd.read_csv(path2cohort,encoding='utf8')
    df_image = pd.read_csv(path2image,encoding='utf8')
    df_image.rename(columns = {'SERVICEDATE':'SERVICE_DATE', 'NARRATIVE':'TEXT'}, inplace = True)
    df_image = df_image.fillna('')
    df_image.sort_values(by='SERVICE_DATE',inplace=True, ascending= False)
    #df_image.head(5)
    df_image['TEXT+DATE'] = df_image['SERVICE_DATE']+'  '+df_image['TEXT'] + '  '+df_image['IMPRESSION']
    print('num of records: ',len(df_image))
    print('unique patients: ',df_image.MRN.nunique(),'\n')
    df_image['TYPE'] = 'imaging'
    df_image.reset_index(inplace = True)
    df_image.drop('index', axis=1,inplace = True)
    #df_image.info()
    #df_image.head(5)
    
    #Applying functions
    #No progress
    df_image['NoProgress'] = df_image['IMPRESSION'].apply(find_noprogress_cancer)
    df_np = df_image.dropna(subset=['NoProgress'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['NoProgress'].unique().to_frame()
    df_np.reset_index(inplace=True)
    print(len(df_np))
    df_np['NoProgress'] = df_np['NoProgress'].apply(lambda x: x[0])
    #df_np.head(10)
    df_np.to_excel('result_withoutprogressMSD2229impr.xlsx')
    
    #Progress
    df_image['Progress'] = df_image['IMPRESSION'].apply(find_progress_cancer)
    df_p = df_image.dropna(subset=['Progress'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Progress'].unique().to_frame()
    df_p.reset_index(inplace=True)
    print(len(df_p))
    df_p['Progress'] = df_p['Progress'].apply(lambda x: x[0])
    #df_p.head(2)
    df_p.to_excel('result_withprogressMSD2229imagnotesimpr.xlsx')
    
    #Final no progress
    df_image['NoProgress Final'] = df_image['IMPRESSION'].apply(find_final_noprogress_cancer)
    df_npf = df_image.dropna(subset=['NoProgress Final'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['NoProgress Final'].unique().to_frame()
    df_npf.reset_index(inplace=True)
    print(len(df_npf))
    df_npf['NoProgress Final'] = df_npf['NoProgress Final'].apply(lambda x: x[0])
    #df_npf.head(10)
    df_npf.to_excel('result_withoutprogressimpr.xlsx')

    #Final progress
    df_image['Progress Final'] = df_image['IMPRESSION'].apply(find_final_progress_cancer)
    df_pf = df_image.dropna(subset=['Progress Final'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['Progress Final'].unique().to_frame()
    df_pf.reset_index(inplace=True)
    print(len(df_pf))
    df_pf['Progress Final'] = df_pf['Progress Final'].apply(lambda x: x[0])
    #df_pf.head(2)
    df_pf.to_excel('result_withprogressimagnotesimpr.xlsx')
    # df_image.sort_values('MRN', inplace=True)
    # df_image.to_excel('result_withprogressfinal.xlsx')

    #MRI
    df_image.loc[df_image['TEXT'].str.contains('MRI', case=False), 'ProgressMRI'] = df_image['TEXT'].apply(find_progress_cancer)
    df_mri = df_image.dropna(subset=['ProgressMRI'],axis=0).drop_duplicates(subset = 'MRN', keep='first').groupby(['MRN'])['ProgressMRI'].unique().to_frame()
    df_mri.reset_index(inplace=True)
    print(len(df_mri))
    df_mri['ProgressMRI'] = df_mri['ProgressMRI'].apply(lambda x: x[0])
    df_image.sort_values('MRN', inplace=True)
    df_image.to_excel('result_withprogressfinal.xlsx')
    
    df_res1 = df_image[['MRN', 'Progress', 'NoProgress', 'Progress Final', 'NoProgress Final','ProgressMRI','SERVICE_DATE']]
    df_res1 = df_res1.rename(columns={'SERVICE_DATE': 'Imaging dates'})
    df_res1.to_excel('result_withprogressfinal2.xlsx')
    #df_res2 = df_res1.copy()
    df_res1.replace({None: '', np.nan: ''}, inplace=True)
    
    # Create a new DataFrame df_final
    df_f = pd.DataFrame()

    df_res = df_res1.groupby('MRN').agg({
    'Progress': prioritize_non_empty,
    'NoProgress': prioritize_non_empty,
    'Progress Final': prioritize_non_empty,
    'NoProgress Final': prioritize_non_empty,
    'ProgressMRI': prioritize_non_empty,
    'Imaging dates': prioritize_non_empty
    }).reset_index()

    df_res.to_excel('result_withprogressfinal3.xlsx')
    if len(df_res) != 0:
        # Copy 'id' column from df_res to df_final
        df_f['MRN'] = df_res['MRN']
    
        # Apply conditions to determine values for columns
        if len(df_f) != 0:
            df_f['Progress'] = df_res.apply(lambda row: 'Progress cancer' if (row['Progress Final'] == 'Progress cancer') or (row['ProgressMRI'] == 'Progress cancer') or (row['Progress'] == 'Progress cancer' and ((row['NoProgress'] == 'No Progress cancer' and row['NoProgress Final'] == '') or (row['NoProgress'] == '' and row['NoProgress Final'] == 'No Progress cancer') or (row['NoProgress'] == '' and row['NoProgress Final'] == '')) ) else '', axis=1)
            df_f['NoProgress'] = df_res.apply(lambda row: 'No Progress cancer' if (row['NoProgress'] == 'No Progress cancer' and row['Progress Final'] == '') or (row['NoProgress'] == 'No Progress cancer' and row['NoProgress Final'] == 'No Progress cancer') else '', axis=1)
            #df_f.update(df_res[['MRN', 'Imaging dates']].set_index('MRN'), overwrite=False)
            df_f = pd.merge(df_f, df_res[['MRN', 'Imaging dates']], on='MRN', how='left')
            # Display the resulting DataFrame
            print(df_f)
        df_f.to_excel('result_withprogressfinal4.xlsx')
    #MRI
    df_mri = pd.DataFrame()
    
    
    #Cohort file
    df_coh_no_duplicates = df_coh.drop_duplicates(subset=['MRN', 'UP_COMING_APPT_DATE', 'MATCH_TYPE','PROVIDER_NAME'])
    if len(df_coh_no_duplicates) != 0:
        df_coh_no_duplicates['MRN'] = df_coh_no_duplicates['MRN'].astype(str)
        df_coh['MRN'] = df_coh['MRN'].astype(str)
    if len(df_res) != 0:
        df_res['MRN'] = df_res['MRN'].astype(str)
    if len(df_f) != 0:
        df_f['MRN'] = df_f['MRN'].astype(str)
    if len(df_f) == 0:
        merged_df = pd.merge(df_coh, df_res, on='MRN', how='left')
    elif len(df_f) != 0:
        merged_df = pd.merge(df_coh, df_f, on='MRN', how='left')
    print(merged_df)
    merged_df = merged_df.rename(columns={'UP_COMING_APPT_DATE': 'Appointment date','PROVIDER_NAME': 'Provider name'})
    merged_df['Appointment date'] = merged_df.groupby('MRN')['Appointment date'].transform(aggregate_values)
    merged_df['Provider name'] = merged_df.groupby('MRN')['Provider name'].transform(aggregate_values)
    merged_df.loc[merged_df['MATCH_TYPE'].str.contains('NEW', case=False, na=False), 'New patients'] = 'New patient'
    merged_df.drop(['MATCH_TYPE'], axis=1, inplace=True)
    merged_df['Imaging dates'] = merged_df['Imaging dates'].apply(lambda x: ','.join(pd.to_datetime(str(x).split(','), errors='coerce', format='%Y/%m/%d').strftime('%m/%d/%Y').dropna()))
    merged_df['Appointment date'] = merged_df['Appointment date'].apply(lambda x: ','.join(pd.to_datetime(str(x).split(','), errors='coerce', format='%Y/%m/%d').strftime('%m/%d/%Y').dropna()))
    merged_df = merged_df[['MRN', 'Progress', 'NoProgress', 'New patients', 'Imaging dates', 'Appointment date', 'Provider name']]
    merged_df.to_excel('result_merged.xlsx')

            
    df_unique = merged_df.drop_duplicates(subset='MRN', keep='first')
    df_sorted = df_unique.sort_values(by='MRN')
    #print(merged_df)
    
    df_sorted.to_excel('result_withprogressfinal5.xlsx')


   